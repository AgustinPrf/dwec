{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Desarrollo Web en Entorno Cliente Apuntes del m\u00f3dulo de \u201cDesarrollo Web en Entorno Cliente\u201d del 2\u00ba curso del CFGS \u201cDesarrollo de Aplicaciones Web\u201d. Unidades UD 1 : Selecci\u00f3n de arquitecturas y herramientas de programaci\u00f3n. UD 2 : Manejo de la sintaxis de JavaScript UD 3 : Funciones, objetos predefinidos, arrays. UD 4 : Utilizaci\u00f3n de los objetos en JavaScript UD 5 : Objetos del navegador. UD 6 : Modelo de Objetos del Documento (DOM). UD 7 : Interacci\u00f3n con el usuario: eventos y formularios. UD 8 : Utilizaci\u00f3n de mecanismos de comunicaci\u00f3n as\u00edncrona. UD 9 : T\u00e9cnicas adicionales: bibliotecas y frameworks.","title":"Inicio"},{"location":"#desarrollo-web-en-entorno-cliente","text":"Apuntes del m\u00f3dulo de \u201cDesarrollo Web en Entorno Cliente\u201d del 2\u00ba curso del CFGS \u201cDesarrollo de Aplicaciones Web\u201d.","title":"Desarrollo Web en Entorno Cliente"},{"location":"#unidades","text":"UD 1 : Selecci\u00f3n de arquitecturas y herramientas de programaci\u00f3n. UD 2 : Manejo de la sintaxis de JavaScript UD 3 : Funciones, objetos predefinidos, arrays. UD 4 : Utilizaci\u00f3n de los objetos en JavaScript UD 5 : Objetos del navegador. UD 6 : Modelo de Objetos del Documento (DOM). UD 7 : Interacci\u00f3n con el usuario: eventos y formularios. UD 8 : Utilizaci\u00f3n de mecanismos de comunicaci\u00f3n as\u00edncrona. UD 9 : T\u00e9cnicas adicionales: bibliotecas y frameworks.","title":"Unidades"},{"location":"Unidad_1/","text":"1. DESARROLLO WEB La web fue inicialmente concebida y creada por Tim Berners-Lee, un especialista del laboratorio europeo de part\u00edculas (CERN) en 1989. En sus mismas palabras, hab\u00eda una \"necesidad de una herramienta colaborativa que soportara el conocimiento cient\u00edfico\" en un contexto internacional. \u00c9l y su compa\u00f1ero Robert Cailliau crearon un prototipo web, lo mostraron a la comunidad para sus pruebas y comentarios. Dicho prototipo estaba basado en el concepto de hipertexto ( Texto que cuando pulsamos en \u00e9l nos conduce a otro texto, objeto, sonido, video, secci\u00f3n o documento relacionado ). Como resultado se crearon unos protocolos ( cuando pulsamos en \u00e9l nos conduce a otro texto, objeto, sonido, v\u00eddeo, secci\u00f3n o documento relacionado ) y especificaciones que han sido adoptados universalmente e incorporados a Internet, gracias a aportaciones posteriores como el desarrollo por la NCSA de la popular interfaz MOSAIC. Todos los prototipos y desarrollos posteriores crecieron bajo la gu\u00eda del consorcio W3C, que es una organizaci\u00f3n con base en el MIT de Massachusetts, que se responsabiliza de desarrollar y mantener los est\u00e1ndares web. 2. ESTRUCTURA CLIENTE SERVIDOR Hoy en d\u00eda los sitios web siguen un modelo basado en la programaci\u00f3n cliente-servidor con tres elementos comunes: El lado del servidor [ server-side ] Incluye el hardware y software del servidor Web as\u00ed como diferentes elementos de programaci\u00f3n y tecnolog\u00edas incrustadas. Las tecnolog\u00edas pueden abarcar un rango amplio desde programas CGI escritos en PERL hasta aplicaciones multihilo ( Tambi\u00e9n denominado multiproceso hace referencia a la posibilidad de ejecutar diferentes trozos de c\u00f3digo de una misma aplicaci\u00f3n de forma simult\u00e1nea ) basadas en Java, incluyendo tecnolog\u00edas de servidor de bases de datos que soporten m\u00faltiples sitios web. El lado del cliente [ client-side ] Este elemento hace referencia a los navegadores web y est\u00e1 soportado por tecnolog\u00edas como HTML, CSS y lenguajes como JavaScript y controles ActiveX, los cuales se utilizan para crear la presentaci\u00f3n de la p\u00e1gina o proporcionar caracter\u00edsticas interactivas. Es justamente aqu\u00ed d\u00f3nde nos vamos a centrar a lo largo de todo el m\u00f3dulo. La red [ Network ] Describe los diferentes elementos de conectividad ( Capacidad que tiene un dispositivo para poder conectarse a otros. Aqu\u00ed se detallan los diferentes protocolos y material utilizado para poder realizar dicha conexi\u00f3n ) utilizados para mostrar el sitio web al usuario. 3. LENGUAJES DE PROGRAMACI\u00d3N EN CLIENTES WEB Cuando hablamos de tecnolog\u00edas empleadas en lenguajes de programaci\u00f3n web podemos citar dos grupos b\u00e1sicos: client-side y server-side. Las tecnolog\u00edas client-side son aquellas que son ejecutadas en el cliente, generalmente en el contexto del navegador web. Cuando los programas o tecnolog\u00edas son ejecutadas o interpretadas por el servidor estamos hablando de programaci\u00f3n server-side. Cada tipo general de programaci\u00f3n tiene su propio lugar y la mezcla es generalmente la mejor soluci\u00f3n. Cuando hablamos de lenguajes de programaci\u00f3n en clientes web, podemos distinguir dos variantes: Lenguajes que nos permiten dar formato y estilo a una p\u00e1gina web HTML, CSS, etc. Lenguajes que nos permite aportar dinamismo a p\u00e1ginas web Lenguajes de scripting. En este m\u00f3dulo nos vamos a centrar principalmente en estos \u00faltimos, los lenguajes de scripting, y en particular en el lenguaje JavaScript que ser\u00e1 el lenguaje que utilizaremos a lo largo de todo este m\u00f3dulo formativo. Lado Cliente [client-side] Lado Servidor [server-side] Aplicaciones de ayuda Programas del API del navegador - Plugins del navegador - Applets de java - Controles Activex Lenguajes de Scripting -Javascript -VBScript Scripts y programas CGI Programas API del servidor - M\u00f3dulos Apache -Extensiones ISAPI y filtros Lenguajes de Scripting -PHP -.NET - ColdFusion Hemos escogido JavaScript porque es el lenguaje de script ( Lenguaje de guiones o lenguaje de \u00f3rdenes que se almacena por lo general en archivos de texto plano y que ser\u00e1 ejecutado por un programa int\u00e9rprete ) m\u00e1s utilizado en la programaci\u00f3n en el lado del cliente, y est\u00e1 soportado mayoritariamente por todas las plataformas ( Sistema operativo utilizado por un determinado dispositivo ). Por lo tanto a partir de ahora todas las referencias que hagamos estar\u00e1n enfocadas hacia JavaScript. A continuaci\u00f3n te mostramos un esquema de las 4 capas del desarrollo web en el lado del cliente , en la que se puede ver que JavaScript se sit\u00faa en la capa superior gestionando el comportamiento de la p\u00e1gina web. Capas del Desarrollo Comportamiento (JavaScript) Presentaci\u00f3n (CSS) Estructura (DOM / Estructura HTML) Contenido (texto , im\u00e1genes , v\u00eddeos, etc) 4. NAVEGADORES Para realizar cualquier desarrollo web, es imprescindible comprobar que el resultado que queremos es el adecuado con la mayor cantidad de navegadores posibles, especialmente aquellos m\u00e1s usados. Adem\u00e1s de procesar etiquetas HTML, los navegadores suelen interpretar lenguajes de script, siendo Javascript uno de los m\u00e1s populares. Definici\u00f3n de navegador Definici\u00f3n: Un navegador o navegador web, o browser (en ingl\u00e9s), es un software que permite el acceso a Internet, interpretando la informaci\u00f3n de distintos tipos de archivos y sitios web para que estos puedan ser visualizados. La funcionalidad b\u00e1sica de un navegador web es permitir la visualizaci\u00f3n de documentos de texto, posiblemente con recursos multimedia incrustados. Adem\u00e1s, permite visitar p\u00e1ginas web y hacer actividades en ella, es decir, podemos enlazar un sitio con otro, imprimir, enviar y recibir correo, entre otras funcionalidades m\u00e1s. Los documentos que se muestran en un navegador pueden estar ubicados en la computadora en donde est\u00e1 el usuario, pero tambi\u00e9n pueden estar en cualquier otro dispositivo que est\u00e9 conectado en la computadora del usuario o a trav\u00e9s de Internet, y que tenga los recursos necesarios para la transmisi\u00f3n de los documentos (un software servidor web). Tales documentos, com\u00fanmente denominados p\u00e1ginas web, poseen hiperv\u00ednculos que enlazan una porci\u00f3n de texto o una imagen a otro documento, normalmente relacionado con el texto o la imagen.El seguimiento de enlaces de una p\u00e1gina a otra, ubicada en cualquier computadora conectada a Internet, se llama navegaci\u00f3n, de donde se origina el nombre navegador. Para acceder a estos recursos, se utiliza un identificador \u00fanico llamado URL (Uniform Resource Locator). El formato general de una URL es : protocolo: //m\u00e1quina/directorio/archivo Aclaraciones Si no se especifica el directorio, toma como directorio el ra\u00edz. Si no se especifica el fichero, toma alguno de los nombres por defecto (\u201cindex.html\u201d, \u201cindex.php\u201d, etc...) Funciones del navegador La comunicaci\u00f3n entre el servidor web y el navegador se realiza mediante el protocolo HTTP, aunque la mayor\u00eda de los navegadores soportan otros protocolos como FTP y HTTPS (una versi\u00f3n cifrada de HTTP basada en Secure Socket Layer o Capa de Conexi\u00f3n Segura (SSL)). La funci\u00f3n principal del navegador es obtener documentos HTML e interpretarlos para mostrarlos en pantalla. En la actualidad, no solamente descargan este tipo de documentos sino que muestran con el documento sus im\u00e1genes, sonidos e incluso v\u00eddeos streaming en diferentes formatos y protocolos. Adem\u00e1s, permiten almacenar la informaci\u00f3n en el disco o crear marcadores (bookmarks) de las p\u00e1ginas m\u00e1s visitadas. Algunos de los navegadores web m\u00e1s populares se incluyen en lo que se denomina una Suite. Estas Suite disponen de varios programas integrados para leer noticias de Usenet y correo electr\u00f3nico mediante los protocolos NNTP, IMAP y POP. Los primeros navegadores web s\u00f3lo soportaban una versi\u00f3n muy simple de HTML. El r\u00e1pido desarrollo de los navegadores web propietarios condujo al desarrollo de dialectos no est\u00e1ndares de HTML y a problemas de interoperabilidad en la web. Los m\u00e1s modernos ( como Google Chrome, Mozilla, Netscape, Opera e Internet Explorer/Microsoft Edg e) soportan los est\u00e1ndares HTML y XHTML (comenzando con HTML 4.01, los cuales \u201cdeber\u00edan\u201d visualizarse de la misma manera en todos ellos). Los est\u00e1ndares web son un conjunto de recomendaciones dadas por el World Wide Web consortium W3C) y otras organizaciones internacionales acerca de c\u00f3mo crear e interpretar documentos basados en la web. Su objetivo es crear una web que trabaje mejor para todos, con sitios accesibles a m\u00e1s personas y que funcionen en cualquier dispositivo de acceso a Internet. Se puede comprobar de manera online si un documento Web cumple el est\u00e1ndar definido por W3C mediante: https://validator.w3.org/ Actualmente la mayor\u00eda de navegadores aceptan p\u00e1ginas no est\u00e1ndar, pero cuanto m\u00e1s est\u00e1ndar se la aplicaci\u00f3n web desarrollada, mayor probabilidad que funcione correctamente en todos los navegadores. \u00a1\u00a1Importante!! Es una pr\u00e1ctica imprescindible el comprobar que cualquier desarrollo Web funcione correctamente en los principales navegadores. 5. PRINCIPALES NAVEGADORES Microsoft Edge - Antiguo Internet Explorer URL Oficial \u2192 https://www.microsoft.com/es-es/windows/microsoft-edge Antiguamente se llamaba Internet Explorer. Microsoft Edge est\u00e1 dise\u00f1ado para ser un navegador web ligero con un motor de renderizado de c\u00f3digo abierto construido en torno a los est\u00e1ndares web. Mozilla Firefox URL Oficial \u2192 https://www.mozilla.org/es-ES/firefox/new/ Mozilla Firefox es un navegador web libre y de c\u00f3digo abierto desarrollado por la Corporaci\u00f3n Mozilla y la Fundaci\u00f3n Mozilla. Usa el motor Gecko para renderizar p\u00e1ginas webs, el cual implementa actuales y futuros est\u00e1ndares web. Posee una versi\u00f3n para desarrolladores: \u201cFirefox Developer Edition\u201d https://www.mozilla.org/en-US/firefox/developer/?utm_source=firebug&utm_medium=lp&utm_campaign=switch&utm_content=landingpage Google Chrome URL Oficial \u2192 https://www.google.com/chrome/ Google Chrome es un navegador web desarrollado por Google y compilado con base en varios componentes e infraestructuras de desarrollo de aplicaciones (frameworks) de c\u00f3digo abierto, como el motor de renderizado Blink (bifurcaci\u00f3n o fork de WebKit). Est\u00e1 disponible gratuitamente bajo condiciones espec\u00edficas del software privativo o cerrado. Safari URL oficial \u2192 http://www.apple.com/es/safari/ Safari es un navegador web de c\u00f3digo cerrado desarrollado por Apple Inc. Est\u00e1 disponible para OS X, iOS (el sistema usado por el iPhone, el iPod touch y iPad) y Windows (sin soporte desde el 2012). Opera URL oficial \u2192 http://www.opera.com/es Opera es un navegador web creado por la empresa noruega Opera Software. Usa el motor de renderizado Blink. Tiene versiones para escritorio, tel\u00e9fonos m\u00f3viles y tabletas. \u00bfQue navegador se recomienda para realizar el curso? Para realizar las actividades del m\u00f3dulo, recomiendo utilizar Mozilla Firefox (aunque es posible usar el que se desee). El motivo de usar este es la gran cantidad de herramientas para depuraci\u00f3n que posee incluso en su versi\u00f3n est\u00e1ndar. Para la mayor\u00eda de acciones con este ser\u00e1 suficiente, pero est\u00e1 disponible una versi\u00f3n que amplia las herramientas de desarrollo llamada \u201cFirefox Developer Edition\u201d. 6. HERRAMIENTAS PARA EL DESARROLLO: CONSOLA WEB Los navegadores incorporan de manera nativa herramientas para facilitar el desarrollo, entra la que destacamos la \u201cConsola Web\u201d. Asimismo, tambi\u00e9n mediante ampliaciones (extensiones, plugins, etc.) se ampl\u00edan caracter\u00edsticas para facilitar el desarrollo y la depuraci\u00f3n de c\u00f3digo. Esta consola incluye varias pesta\u00f1as : Red \u2192 Registro de Peticiones HTTP. CSS \u2192 Registra an\u00e1lisis y errores CSS. JS \u2192 Registra an\u00e1lisis y errores Javascript Seguridad \u2192 Registra advertencias o fallos de seguridad. Registro \u2192 Registra mensajes enviados al objeto \u201cwindow.console\u201d Servidor \u2192 Registrar mensajes recibidos del servidor Web. El resultado de las peticiones HTTP se muestra de color negro, CSS de color azul, JavaScript amarillo y los errores o advertencias de seguridad de color rojo, registro objeto \u201cwindow.console\u201d en gris y Servidor en verde. 7. ENTORNO DE DESARROLLO Existen diversos entornos de desarrollo, desde los m\u00e1s sencillos (Brackets, Notepad++, Sublime, Visual Studio Code, etc...) a interfaces m\u00e1s complejas (Aptana, Eclipse, etc...) En principio pod\u00e9is usar aquel que quer\u00e1is. Visual Studio Code Recomendamos Visual Studio Code. Es software libre y muy potente https://code.visualstudio.com/ Aqu\u00ed algunos manuales libres de uso de Visual Studio Code en castellano: http://www.mclibre.org/consultar/informatica/lecciones/vsc-instalacion.html http://www.mclibre.org/consultar/informatica/lecciones/vsc-personalizacion.html Control de versiones en Visual Studio Code Durante el curso, se utilizar\u00e1n repositorios Git tanto para la entrega de pr\u00e1cticas como para facilitaros el disponer de un repositorio con control de versiones. Utilizaremos una cuenta Git en Github : https://www-github.com Pod\u00e9is instalarlo en: Ubuntu: sudo apt-get update sudo apt-get install git Windows: https://git-for-windows.github.io/ Para facilitar la tarea del uso de Git es recomendable instalar alguna extensi\u00f3n o entorno que os facilite su uso. Para usar Git en Visual Studio Code https://code.visualstudio.com/docs/editor/versioncontrol http://www.mclibre.org/consultar/informatica/lecciones/vsc-git-repositorio.html Aqu\u00ed un ejemplo del uso de Git en Visual Studio Code. https://code.visualstudio.com/docs/introvideos/versioncontrol 8. CONTROL DE VERSIONES: GIT \u2013 GITHUB Git es un software de control de versiones dise\u00f1ado por Linus Torvalds, pensando en la eficiencia y la confiabilidad del mantenimiento de versiones de aplicaciones cuando \u00e9stas tienen un gran n\u00famero de archivos de c\u00f3digo fuente. Su prop\u00f3sito es llevar registro de los cambios en archivos de computadora y coordinar el trabajo que varias personas realizan sobre archivos compartidos Si est\u00e1s en una distribuci\u00f3n basada en Debian como Ubuntu, puedes usar apt-get: apt-get install git Para instalar git en otros sistemas operativos puedes utilizar como referencia la informaci\u00f3n de la web: https://git-scm.com/book/es/v2/Inicio---Sobre-el-Control-de-Versiones-Instalaci\u00f3n-de-Git * \u00d3rdenes b\u00e1sicas en git Crear un subdirectorio nuevo llamado .git, el cual contiene todos los archivos necesarios del repositorio git init Descargar informaci\u00f3n de una determinada rama, unifica los comando fetch y merge. git pull Comienza a trackear el archivo \u201cnombre_archivo\u201d. git add <nombre_archivo> Confirma los cambios realizados. El \u201cmensaje\u201d generalmente se usa para asociar al commit una breve descripci\u00f3n de los cambios realizados. git commit -am \"<mensaje>\" Commitea los cambios desde el branch local origin al branch \u201cnombre_rama\u201d. git push origin <nombre_rama> Para consultar m\u00e1s comando, puedes visitar la web: https://git-scm.com/docs Github GitHub es una forja (plataforma de desarrollo colaborativo) para alojar proyectos utilizando el sistema de control de versiones Git. Se utiliza principalmente para la creaci\u00f3n de c\u00f3digo fuente de programas de ordenador. El software que opera GitHub fue escrito en Ruby on Rails El 4 de junio de 2018, Microsoft compr\u00f3 GitHub por la cantidad de 7.500 millones de d\u00f3lares, este cambio de propietarios provoc\u00f3 la salida de varios proyecto desde este repositorio debido la posibilidad de acceso a c\u00f3digos fuentes por parte de una compa\u00f1\u00eda que su negocios es el software: http://www.github.com 9. INTEGRACI\u00d3N DE C\u00d3DIGO JAVASCRIPT CON HTML Ahora que ya conoces las herramientas que puedes utilizar para comenzar a programar en JavaScript, vamos a ver la forma de integrar el c\u00f3digo de JavaScript en tu c\u00f3digo HTML. Etiqueta script Los navegadores web te permiten varias opciones de inserci\u00f3n de c\u00f3digo de JavaScript. Podremos insertar c\u00f3digo usando las etiquetas script y empleando un atributo type indicaremos qu\u00e9 tipo de lenguaje de script estamos utilizando. <script type=\u201dtext/javascript\u201d> // El c\u00f3digo javascript vendr\u00e1 aqu\u00ed </script> Fichero externo Otra forma de integrar el c\u00f3digo de JavaScript es incrustar un fichero externo que contenga el c\u00f3digo de JavaScript. \u00c9sta ser\u00eda la forma m\u00e1s recomendable , ya que as\u00ed se consigue una separaci\u00f3n entre el c\u00f3digo y la estructura de la p\u00e1gina web y como ventajas adicionales podr\u00e1s compartir c\u00f3digo entre diferentes p\u00e1ginas, centralizar el c\u00f3digo para la depuraci\u00f3n de errores, tendr\u00e1s mayor claridad en tus desarrollos, m\u00e1s modularidad, seguridad del c\u00f3digo y conseguir\u00e1s que las p\u00e1ginas carguen m\u00e1s r\u00e1pido. La rapidez de carga de las p\u00e1ginas se consigue al tener el c\u00f3digo de JavaScript en un fichero independiente, ya que si m\u00e1s de una p\u00e1gina tiene que acceder a ese fichero lo coger\u00e1 autom\u00e1ticamente de la cach\u00e9 del navegador con lo que se acelerar\u00e1 la carga de la p\u00e1gina. Para ello tendremos que a\u00f1adir a la etiqueta script el atributo src , con el nombre del fichero que contiene el c\u00f3digo de JavaScript. Generalmente los ficheros que contienen texto de JavaScript tendr\u00e1n la extensi\u00f3n .js . <script type=\u201dtext/javascript\u201d src=\u201dtucodigo.js\u201d> </script> En c\u00f3digo html Otra alternativa consiste en incorporar javascript directamente en elementos html. Numerosos autores no recomiendan esta opci\u00f3n, con el principal motivo de que dificulta considerablemente el mantenimiento de aplicaciones. <body> <p onclick=\u201dalert(\u2018un mensaje de prueba\u2019)\u201d>P\u00e1rrafo de texto</p> <body> Etiqueta noscript El lenguaje HTML define la etiqueta noscript para mostrar un mensaje al usuario cuando su navegador no puede ejecutar JavaScript. Esta etiqueta debe incluir en el interior el mensaje a mostrar, adem\u00e1s puede incluir cualquier elemento o etiqueta XHTML. <head> ... </head> <body> <noscript> <p> Bienvenido a Mi Sitio</p> <p> La p\u00e1gina que est\u00e1s viendo requiere para su funcionamiento el uso de JavaScript. Si lo has deshabilitado intencionadamente, por favor vuelve a activarlo </p> <noscript> <body>","title":"UD 1"},{"location":"Unidad_1/#1-desarrollo-web","text":"La web fue inicialmente concebida y creada por Tim Berners-Lee, un especialista del laboratorio europeo de part\u00edculas (CERN) en 1989. En sus mismas palabras, hab\u00eda una \"necesidad de una herramienta colaborativa que soportara el conocimiento cient\u00edfico\" en un contexto internacional. \u00c9l y su compa\u00f1ero Robert Cailliau crearon un prototipo web, lo mostraron a la comunidad para sus pruebas y comentarios. Dicho prototipo estaba basado en el concepto de hipertexto ( Texto que cuando pulsamos en \u00e9l nos conduce a otro texto, objeto, sonido, video, secci\u00f3n o documento relacionado ). Como resultado se crearon unos protocolos ( cuando pulsamos en \u00e9l nos conduce a otro texto, objeto, sonido, v\u00eddeo, secci\u00f3n o documento relacionado ) y especificaciones que han sido adoptados universalmente e incorporados a Internet, gracias a aportaciones posteriores como el desarrollo por la NCSA de la popular interfaz MOSAIC. Todos los prototipos y desarrollos posteriores crecieron bajo la gu\u00eda del consorcio W3C, que es una organizaci\u00f3n con base en el MIT de Massachusetts, que se responsabiliza de desarrollar y mantener los est\u00e1ndares web.","title":"1. DESARROLLO WEB"},{"location":"Unidad_1/#2-estructura-cliente-servidor","text":"Hoy en d\u00eda los sitios web siguen un modelo basado en la programaci\u00f3n cliente-servidor con tres elementos comunes: El lado del servidor [ server-side ] Incluye el hardware y software del servidor Web as\u00ed como diferentes elementos de programaci\u00f3n y tecnolog\u00edas incrustadas. Las tecnolog\u00edas pueden abarcar un rango amplio desde programas CGI escritos en PERL hasta aplicaciones multihilo ( Tambi\u00e9n denominado multiproceso hace referencia a la posibilidad de ejecutar diferentes trozos de c\u00f3digo de una misma aplicaci\u00f3n de forma simult\u00e1nea ) basadas en Java, incluyendo tecnolog\u00edas de servidor de bases de datos que soporten m\u00faltiples sitios web. El lado del cliente [ client-side ] Este elemento hace referencia a los navegadores web y est\u00e1 soportado por tecnolog\u00edas como HTML, CSS y lenguajes como JavaScript y controles ActiveX, los cuales se utilizan para crear la presentaci\u00f3n de la p\u00e1gina o proporcionar caracter\u00edsticas interactivas. Es justamente aqu\u00ed d\u00f3nde nos vamos a centrar a lo largo de todo el m\u00f3dulo. La red [ Network ] Describe los diferentes elementos de conectividad ( Capacidad que tiene un dispositivo para poder conectarse a otros. Aqu\u00ed se detallan los diferentes protocolos y material utilizado para poder realizar dicha conexi\u00f3n ) utilizados para mostrar el sitio web al usuario.","title":"2. ESTRUCTURA CLIENTE SERVIDOR"},{"location":"Unidad_1/#3-lenguajes-de-programacion-en-clientes-web","text":"Cuando hablamos de tecnolog\u00edas empleadas en lenguajes de programaci\u00f3n web podemos citar dos grupos b\u00e1sicos: client-side y server-side. Las tecnolog\u00edas client-side son aquellas que son ejecutadas en el cliente, generalmente en el contexto del navegador web. Cuando los programas o tecnolog\u00edas son ejecutadas o interpretadas por el servidor estamos hablando de programaci\u00f3n server-side. Cada tipo general de programaci\u00f3n tiene su propio lugar y la mezcla es generalmente la mejor soluci\u00f3n. Cuando hablamos de lenguajes de programaci\u00f3n en clientes web, podemos distinguir dos variantes: Lenguajes que nos permiten dar formato y estilo a una p\u00e1gina web HTML, CSS, etc. Lenguajes que nos permite aportar dinamismo a p\u00e1ginas web Lenguajes de scripting. En este m\u00f3dulo nos vamos a centrar principalmente en estos \u00faltimos, los lenguajes de scripting, y en particular en el lenguaje JavaScript que ser\u00e1 el lenguaje que utilizaremos a lo largo de todo este m\u00f3dulo formativo. Lado Cliente [client-side] Lado Servidor [server-side] Aplicaciones de ayuda Programas del API del navegador - Plugins del navegador - Applets de java - Controles Activex Lenguajes de Scripting -Javascript -VBScript Scripts y programas CGI Programas API del servidor - M\u00f3dulos Apache -Extensiones ISAPI y filtros Lenguajes de Scripting -PHP -.NET - ColdFusion Hemos escogido JavaScript porque es el lenguaje de script ( Lenguaje de guiones o lenguaje de \u00f3rdenes que se almacena por lo general en archivos de texto plano y que ser\u00e1 ejecutado por un programa int\u00e9rprete ) m\u00e1s utilizado en la programaci\u00f3n en el lado del cliente, y est\u00e1 soportado mayoritariamente por todas las plataformas ( Sistema operativo utilizado por un determinado dispositivo ). Por lo tanto a partir de ahora todas las referencias que hagamos estar\u00e1n enfocadas hacia JavaScript. A continuaci\u00f3n te mostramos un esquema de las 4 capas del desarrollo web en el lado del cliente , en la que se puede ver que JavaScript se sit\u00faa en la capa superior gestionando el comportamiento de la p\u00e1gina web. Capas del Desarrollo Comportamiento (JavaScript) Presentaci\u00f3n (CSS) Estructura (DOM / Estructura HTML) Contenido (texto , im\u00e1genes , v\u00eddeos, etc)","title":"3. LENGUAJES DE PROGRAMACI\u00d3N EN CLIENTES WEB"},{"location":"Unidad_1/#4-navegadores","text":"Para realizar cualquier desarrollo web, es imprescindible comprobar que el resultado que queremos es el adecuado con la mayor cantidad de navegadores posibles, especialmente aquellos m\u00e1s usados. Adem\u00e1s de procesar etiquetas HTML, los navegadores suelen interpretar lenguajes de script, siendo Javascript uno de los m\u00e1s populares.","title":"4. NAVEGADORES"},{"location":"Unidad_1/#definicion-de-navegador","text":"Definici\u00f3n: Un navegador o navegador web, o browser (en ingl\u00e9s), es un software que permite el acceso a Internet, interpretando la informaci\u00f3n de distintos tipos de archivos y sitios web para que estos puedan ser visualizados. La funcionalidad b\u00e1sica de un navegador web es permitir la visualizaci\u00f3n de documentos de texto, posiblemente con recursos multimedia incrustados. Adem\u00e1s, permite visitar p\u00e1ginas web y hacer actividades en ella, es decir, podemos enlazar un sitio con otro, imprimir, enviar y recibir correo, entre otras funcionalidades m\u00e1s. Los documentos que se muestran en un navegador pueden estar ubicados en la computadora en donde est\u00e1 el usuario, pero tambi\u00e9n pueden estar en cualquier otro dispositivo que est\u00e9 conectado en la computadora del usuario o a trav\u00e9s de Internet, y que tenga los recursos necesarios para la transmisi\u00f3n de los documentos (un software servidor web). Tales documentos, com\u00fanmente denominados p\u00e1ginas web, poseen hiperv\u00ednculos que enlazan una porci\u00f3n de texto o una imagen a otro documento, normalmente relacionado con el texto o la imagen.El seguimiento de enlaces de una p\u00e1gina a otra, ubicada en cualquier computadora conectada a Internet, se llama navegaci\u00f3n, de donde se origina el nombre navegador. Para acceder a estos recursos, se utiliza un identificador \u00fanico llamado URL (Uniform Resource Locator). El formato general de una URL es : protocolo: //m\u00e1quina/directorio/archivo Aclaraciones Si no se especifica el directorio, toma como directorio el ra\u00edz. Si no se especifica el fichero, toma alguno de los nombres por defecto (\u201cindex.html\u201d, \u201cindex.php\u201d, etc...)","title":"Definici\u00f3n de navegador"},{"location":"Unidad_1/#funciones-del-navegador","text":"La comunicaci\u00f3n entre el servidor web y el navegador se realiza mediante el protocolo HTTP, aunque la mayor\u00eda de los navegadores soportan otros protocolos como FTP y HTTPS (una versi\u00f3n cifrada de HTTP basada en Secure Socket Layer o Capa de Conexi\u00f3n Segura (SSL)). La funci\u00f3n principal del navegador es obtener documentos HTML e interpretarlos para mostrarlos en pantalla. En la actualidad, no solamente descargan este tipo de documentos sino que muestran con el documento sus im\u00e1genes, sonidos e incluso v\u00eddeos streaming en diferentes formatos y protocolos. Adem\u00e1s, permiten almacenar la informaci\u00f3n en el disco o crear marcadores (bookmarks) de las p\u00e1ginas m\u00e1s visitadas. Algunos de los navegadores web m\u00e1s populares se incluyen en lo que se denomina una Suite. Estas Suite disponen de varios programas integrados para leer noticias de Usenet y correo electr\u00f3nico mediante los protocolos NNTP, IMAP y POP. Los primeros navegadores web s\u00f3lo soportaban una versi\u00f3n muy simple de HTML. El r\u00e1pido desarrollo de los navegadores web propietarios condujo al desarrollo de dialectos no est\u00e1ndares de HTML y a problemas de interoperabilidad en la web. Los m\u00e1s modernos ( como Google Chrome, Mozilla, Netscape, Opera e Internet Explorer/Microsoft Edg e) soportan los est\u00e1ndares HTML y XHTML (comenzando con HTML 4.01, los cuales \u201cdeber\u00edan\u201d visualizarse de la misma manera en todos ellos). Los est\u00e1ndares web son un conjunto de recomendaciones dadas por el World Wide Web consortium W3C) y otras organizaciones internacionales acerca de c\u00f3mo crear e interpretar documentos basados en la web. Su objetivo es crear una web que trabaje mejor para todos, con sitios accesibles a m\u00e1s personas y que funcionen en cualquier dispositivo de acceso a Internet. Se puede comprobar de manera online si un documento Web cumple el est\u00e1ndar definido por W3C mediante: https://validator.w3.org/ Actualmente la mayor\u00eda de navegadores aceptan p\u00e1ginas no est\u00e1ndar, pero cuanto m\u00e1s est\u00e1ndar se la aplicaci\u00f3n web desarrollada, mayor probabilidad que funcione correctamente en todos los navegadores. \u00a1\u00a1Importante!! Es una pr\u00e1ctica imprescindible el comprobar que cualquier desarrollo Web funcione correctamente en los principales navegadores.","title":"Funciones del navegador"},{"location":"Unidad_1/#5-principales-navegadores","text":"","title":"5. PRINCIPALES NAVEGADORES"},{"location":"Unidad_1/#microsoft-edge-antiguo-internet-explorer","text":"URL Oficial \u2192 https://www.microsoft.com/es-es/windows/microsoft-edge Antiguamente se llamaba Internet Explorer. Microsoft Edge est\u00e1 dise\u00f1ado para ser un navegador web ligero con un motor de renderizado de c\u00f3digo abierto construido en torno a los est\u00e1ndares web.","title":"Microsoft Edge  -  Antiguo Internet Explorer"},{"location":"Unidad_1/#mozilla-firefox","text":"URL Oficial \u2192 https://www.mozilla.org/es-ES/firefox/new/ Mozilla Firefox es un navegador web libre y de c\u00f3digo abierto desarrollado por la Corporaci\u00f3n Mozilla y la Fundaci\u00f3n Mozilla. Usa el motor Gecko para renderizar p\u00e1ginas webs, el cual implementa actuales y futuros est\u00e1ndares web. Posee una versi\u00f3n para desarrolladores: \u201cFirefox Developer Edition\u201d https://www.mozilla.org/en-US/firefox/developer/?utm_source=firebug&utm_medium=lp&utm_campaign=switch&utm_content=landingpage","title":"Mozilla Firefox"},{"location":"Unidad_1/#google-chrome","text":"URL Oficial \u2192 https://www.google.com/chrome/ Google Chrome es un navegador web desarrollado por Google y compilado con base en varios componentes e infraestructuras de desarrollo de aplicaciones (frameworks) de c\u00f3digo abierto, como el motor de renderizado Blink (bifurcaci\u00f3n o fork de WebKit). Est\u00e1 disponible gratuitamente bajo condiciones espec\u00edficas del software privativo o cerrado.","title":"Google Chrome"},{"location":"Unidad_1/#safari","text":"URL oficial \u2192 http://www.apple.com/es/safari/ Safari es un navegador web de c\u00f3digo cerrado desarrollado por Apple Inc. Est\u00e1 disponible para OS X, iOS (el sistema usado por el iPhone, el iPod touch y iPad) y Windows (sin soporte desde el 2012).","title":"Safari"},{"location":"Unidad_1/#opera","text":"URL oficial \u2192 http://www.opera.com/es Opera es un navegador web creado por la empresa noruega Opera Software. Usa el motor de renderizado Blink. Tiene versiones para escritorio, tel\u00e9fonos m\u00f3viles y tabletas.","title":"Opera"},{"location":"Unidad_1/#que-navegador-se-recomienda-para-realizar-el-curso","text":"Para realizar las actividades del m\u00f3dulo, recomiendo utilizar Mozilla Firefox (aunque es posible usar el que se desee). El motivo de usar este es la gran cantidad de herramientas para depuraci\u00f3n que posee incluso en su versi\u00f3n est\u00e1ndar. Para la mayor\u00eda de acciones con este ser\u00e1 suficiente, pero est\u00e1 disponible una versi\u00f3n que amplia las herramientas de desarrollo llamada \u201cFirefox Developer Edition\u201d.","title":"\u00bfQue navegador se recomienda para realizar el curso?"},{"location":"Unidad_1/#6-herramientas-para-el-desarrollo-consola-web","text":"Los navegadores incorporan de manera nativa herramientas para facilitar el desarrollo, entra la que destacamos la \u201cConsola Web\u201d. Asimismo, tambi\u00e9n mediante ampliaciones (extensiones, plugins, etc.) se ampl\u00edan caracter\u00edsticas para facilitar el desarrollo y la depuraci\u00f3n de c\u00f3digo. Esta consola incluye varias pesta\u00f1as : Red \u2192 Registro de Peticiones HTTP. CSS \u2192 Registra an\u00e1lisis y errores CSS. JS \u2192 Registra an\u00e1lisis y errores Javascript Seguridad \u2192 Registra advertencias o fallos de seguridad. Registro \u2192 Registra mensajes enviados al objeto \u201cwindow.console\u201d Servidor \u2192 Registrar mensajes recibidos del servidor Web. El resultado de las peticiones HTTP se muestra de color negro, CSS de color azul, JavaScript amarillo y los errores o advertencias de seguridad de color rojo, registro objeto \u201cwindow.console\u201d en gris y Servidor en verde.","title":"6. HERRAMIENTAS PARA EL DESARROLLO: CONSOLA WEB"},{"location":"Unidad_1/#7-entorno-de-desarrollo","text":"Existen diversos entornos de desarrollo, desde los m\u00e1s sencillos (Brackets, Notepad++, Sublime, Visual Studio Code, etc...) a interfaces m\u00e1s complejas (Aptana, Eclipse, etc...) En principio pod\u00e9is usar aquel que quer\u00e1is.","title":"7. ENTORNO DE DESARROLLO"},{"location":"Unidad_1/#visual-studio-code","text":"Recomendamos Visual Studio Code. Es software libre y muy potente https://code.visualstudio.com/ Aqu\u00ed algunos manuales libres de uso de Visual Studio Code en castellano: http://www.mclibre.org/consultar/informatica/lecciones/vsc-instalacion.html http://www.mclibre.org/consultar/informatica/lecciones/vsc-personalizacion.html","title":"Visual Studio Code"},{"location":"Unidad_1/#control-de-versiones-en-visual-studio-code","text":"Durante el curso, se utilizar\u00e1n repositorios Git tanto para la entrega de pr\u00e1cticas como para facilitaros el disponer de un repositorio con control de versiones. Utilizaremos una cuenta Git en Github : https://www-github.com Pod\u00e9is instalarlo en: Ubuntu: sudo apt-get update sudo apt-get install git Windows: https://git-for-windows.github.io/ Para facilitar la tarea del uso de Git es recomendable instalar alguna extensi\u00f3n o entorno que os facilite su uso. Para usar Git en Visual Studio Code https://code.visualstudio.com/docs/editor/versioncontrol http://www.mclibre.org/consultar/informatica/lecciones/vsc-git-repositorio.html Aqu\u00ed un ejemplo del uso de Git en Visual Studio Code. https://code.visualstudio.com/docs/introvideos/versioncontrol","title":"Control de versiones en Visual Studio Code"},{"location":"Unidad_1/#8-control-de-versiones-git-github","text":"Git es un software de control de versiones dise\u00f1ado por Linus Torvalds, pensando en la eficiencia y la confiabilidad del mantenimiento de versiones de aplicaciones cuando \u00e9stas tienen un gran n\u00famero de archivos de c\u00f3digo fuente. Su prop\u00f3sito es llevar registro de los cambios en archivos de computadora y coordinar el trabajo que varias personas realizan sobre archivos compartidos Si est\u00e1s en una distribuci\u00f3n basada en Debian como Ubuntu, puedes usar apt-get: apt-get install git Para instalar git en otros sistemas operativos puedes utilizar como referencia la informaci\u00f3n de la web: https://git-scm.com/book/es/v2/Inicio---Sobre-el-Control-de-Versiones-Instalaci\u00f3n-de-Git","title":"8. CONTROL DE VERSIONES: GIT \u2013 GITHUB"},{"location":"Unidad_1/#ordenes-basicas-en-git","text":"Crear un subdirectorio nuevo llamado .git, el cual contiene todos los archivos necesarios del repositorio git init Descargar informaci\u00f3n de una determinada rama, unifica los comando fetch y merge. git pull Comienza a trackear el archivo \u201cnombre_archivo\u201d. git add <nombre_archivo> Confirma los cambios realizados. El \u201cmensaje\u201d generalmente se usa para asociar al commit una breve descripci\u00f3n de los cambios realizados. git commit -am \"<mensaje>\" Commitea los cambios desde el branch local origin al branch \u201cnombre_rama\u201d. git push origin <nombre_rama> Para consultar m\u00e1s comando, puedes visitar la web: https://git-scm.com/docs","title":"*\u00d3rdenes b\u00e1sicas en git"},{"location":"Unidad_1/#github","text":"GitHub es una forja (plataforma de desarrollo colaborativo) para alojar proyectos utilizando el sistema de control de versiones Git. Se utiliza principalmente para la creaci\u00f3n de c\u00f3digo fuente de programas de ordenador. El software que opera GitHub fue escrito en Ruby on Rails El 4 de junio de 2018, Microsoft compr\u00f3 GitHub por la cantidad de 7.500 millones de d\u00f3lares, este cambio de propietarios provoc\u00f3 la salida de varios proyecto desde este repositorio debido la posibilidad de acceso a c\u00f3digos fuentes por parte de una compa\u00f1\u00eda que su negocios es el software: http://www.github.com","title":"Github"},{"location":"Unidad_1/#9-integracion-de-codigo-javascript-con-html","text":"Ahora que ya conoces las herramientas que puedes utilizar para comenzar a programar en JavaScript, vamos a ver la forma de integrar el c\u00f3digo de JavaScript en tu c\u00f3digo HTML.","title":"9. INTEGRACI\u00d3N DE C\u00d3DIGO JAVASCRIPT CON HTML"},{"location":"Unidad_1/#etiqueta-script","text":"Los navegadores web te permiten varias opciones de inserci\u00f3n de c\u00f3digo de JavaScript. Podremos insertar c\u00f3digo usando las etiquetas script y empleando un atributo type indicaremos qu\u00e9 tipo de lenguaje de script estamos utilizando. <script type=\u201dtext/javascript\u201d> // El c\u00f3digo javascript vendr\u00e1 aqu\u00ed </script>","title":"Etiqueta script"},{"location":"Unidad_1/#fichero-externo","text":"Otra forma de integrar el c\u00f3digo de JavaScript es incrustar un fichero externo que contenga el c\u00f3digo de JavaScript. \u00c9sta ser\u00eda la forma m\u00e1s recomendable , ya que as\u00ed se consigue una separaci\u00f3n entre el c\u00f3digo y la estructura de la p\u00e1gina web y como ventajas adicionales podr\u00e1s compartir c\u00f3digo entre diferentes p\u00e1ginas, centralizar el c\u00f3digo para la depuraci\u00f3n de errores, tendr\u00e1s mayor claridad en tus desarrollos, m\u00e1s modularidad, seguridad del c\u00f3digo y conseguir\u00e1s que las p\u00e1ginas carguen m\u00e1s r\u00e1pido. La rapidez de carga de las p\u00e1ginas se consigue al tener el c\u00f3digo de JavaScript en un fichero independiente, ya que si m\u00e1s de una p\u00e1gina tiene que acceder a ese fichero lo coger\u00e1 autom\u00e1ticamente de la cach\u00e9 del navegador con lo que se acelerar\u00e1 la carga de la p\u00e1gina. Para ello tendremos que a\u00f1adir a la etiqueta script el atributo src , con el nombre del fichero que contiene el c\u00f3digo de JavaScript. Generalmente los ficheros que contienen texto de JavaScript tendr\u00e1n la extensi\u00f3n .js . <script type=\u201dtext/javascript\u201d src=\u201dtucodigo.js\u201d> </script>","title":"Fichero externo"},{"location":"Unidad_1/#en-codigo-html","text":"Otra alternativa consiste en incorporar javascript directamente en elementos html. Numerosos autores no recomiendan esta opci\u00f3n, con el principal motivo de que dificulta considerablemente el mantenimiento de aplicaciones. <body> <p onclick=\u201dalert(\u2018un mensaje de prueba\u2019)\u201d>P\u00e1rrafo de texto</p> <body>","title":"En c\u00f3digo html"},{"location":"Unidad_1/#etiqueta-noscript","text":"El lenguaje HTML define la etiqueta noscript para mostrar un mensaje al usuario cuando su navegador no puede ejecutar JavaScript. Esta etiqueta debe incluir en el interior el mensaje a mostrar, adem\u00e1s puede incluir cualquier elemento o etiqueta XHTML. <head> ... </head> <body> <noscript> <p> Bienvenido a Mi Sitio</p> <p> La p\u00e1gina que est\u00e1s viendo requiere para su funcionamiento el uso de JavaScript. Si lo has deshabilitado intencionadamente, por favor vuelve a activarlo </p> <noscript> <body>","title":"Etiqueta noscript"},{"location":"Unidad_2/","text":"1. INTRODUCCI\u00d3N Javascript es un lenguaje de programaci\u00f3n que permite ejecutar c\u00f3digo en el cliente ( nuestro navegador ) ampliando la funcionalidad nuestros sitios web. Para a\u00f1adir JavaScript se usa la etiqueta script . Este puede estar en cualquier lugar de la p\u00e1gina. El c\u00f3digo se ejecuta de forma secuencial a como el navegador lo va encontrando. <SCRIPT LANGUAGE=\"JavaScript\"> <!-- Aqu\u00ed va el c\u00f3digo // Esto es un comentario en Javascript de una linea --> </SCRIPT> 2. Comentarios En Javascript los comentarios se pueden hacer con: // \u2192 Comentarios de una l\u00ednea. /* */ \u2192 Comentarios de varias l\u00edneas. Desde Javascript es posible reescribir el c\u00f3digo HTML de la p\u00e1gina mediante la orden document.write( texto ) Este ejemplo podr\u00eda ser un peque\u00f1o \"hola mundo\" que al ejecutarse modificar\u00e1 el HTML de la p\u00e1gina. <SCRIPT LANGUAGE=\"JavaScript\"> document.write (\"Hola mundo\"); /* Esto es un comentario en Javascript multilinea */ </SCRIPT> Otra v\u00eda para mostrar informaci\u00f3n al usuario desde una ventana emergente, es el comando alert( texto ). <SCRIPT LANGUAGE=\"JavaScript\"> alert(\"Hola mundo\"); </SCRIPT> Hay una forma mucho m\u00e1s pr\u00e1ctica y ordenada de usar c\u00f3digo Javascript. Se pueden incluir uno o varios ficheros con c\u00f3digo Javascript. Se pueden incluir tantos como se desee. Un ejemplo de inclusi\u00f3n de ficheros. <script type=\"text/javascript\" src=\"rutaDelArchivo1.js\"/> <script type=\"text/javascript\" src=\"rutaDelArchivo2.js\"/> <script type=\"text/javascript\" src=\"rutaDelArchivo3.js\"/> 3. Variables Las variables son elementos del lenguaje que permiten almacenar distintos valores en cada momento. Se puede almacenar un valor en una variable y consultar este valor posteriormente. Tambi\u00e9n podemos modificar su contenido siempre que queramos. Para declarar las variables en JavaScript se utiliza la palabra reservada var . var ejemplo; var resultado; ejemplo= \"Hola\"; resultado=3+7; En JavaScript todas las variables y nombres de funci\u00f3n son sensibles a may\u00fasculas y min\u00fasculas . Esto significa que la capitalizaci\u00f3n importa. Escribe los nombres de las variables en JavaScript en camelCase . En camelCase, los nombres de variables de m\u00faltiples palabras tienen la primera palabra en min\u00fasculas y la primera letra de cada palabra posterior en may\u00fasculas. Tipos de variables JavaScript proporciona ocho tipos de datos diferentes: undefined , null, boolean, string, symbol, bigint, number, y object. N\u00fameros , puede contener cualquier tipo de n\u00famero real (0.3,1.7,2.9) o entero (5,3,-1). Operadores, l\u00f3gicos o boolean : puede contener uno de los siguientes valores: true, false, 1 y 0. Cadenas de caracteres o String , cualquier combinaci\u00f3n de caracteres (letras, n\u00fameros, signos especiales y espacios). Las cadenas se delimitan mediante comillas dobles o simples (\u201cLolo\u201d,\u201dlalO\u201d). Para concatenar cadenas puede usarse el operador + (\u201cSoy\u201d + \u201c el \u201c + \u201c AMO\u201d formar\u00eda la cadena \u201cSoy el AMO\u201d). Undefined : Valor no definido, es decir, la variable no tiene asignado un valor. var edad=23, nueva_edad, incremento; var nombre=\"Rosa Garc\u00eda\"; incremento=4; nueva_edad=edad+incremento; alert(nombre+ \" dentro de \"+incremento +\" a\u00f1os tendr\u00e1 \"+ nueva_edad+\"a\u00f1os\"); Puedes utilizar la funci\u00f3n typeof para consultar el tipo de la variable o dato: console.log(typeof(5)) ### Arrays Un array (tambi\u00e9n llamado vector o arreglo) es una variable que contiene diversos valores. Lo creamos con \u201cnew Array()\u201d o inicializando los elementos. Podemos referenciar esos valores indicando su posici\u00f3n en el array. Los arrays poseen una propiedad llamada \u201clength\u201d que podemos utilizar para conocer el n\u00famero de elementos del array. // Array definido 1 a 1 var miVector=new Array(); miVector[0]=22; miVector[1]=12; miVector[2]=33; //Array definido en una linea var otroArray=[1,2,\"Cancamusa\"]; // Valores dentro del array alert(miVector[1]); alert(otroArray[2]); // Valor completo del array alert(miVector); // Tama\u00f1o del array alert(miVector.length); ### Conversiones entre tipos Javascript no define expl\u00edcitamente el tipo de datos de sus variables. Seg\u00fan se almacenen, pueden ser cadenas (Entrecomillados), enteros (sin parte decimal) o decimales (con parte decimal). Elementos como la funci\u00f3n \u201cprompt\u201d para leer de teclado, leen los elementos siempre como cadena. Para estos casos y otros, merece la pena usar funciones de conversi\u00f3n de datos. var num=\u201d100\u201d; // Es una cadena var num2=\u201d100.13\u201d; // Es una cadena var num3=11; // Es un entero var n=parseInt(num); // Almacena un entero. var n2=parseFloat(num); // Almacena un decimal var n3=num3.toString(); // Almacena una cadena 4. Mostrar por pantalla y leer del teclado alert() , confirm(), prompt() El m\u00e9todo alert() permite mostrar al usuario informaci\u00f3n literal o el contenido de variables en una ventana independiente. La ventana contendr\u00e1 la informaci\u00f3n a mostrar y el bot\u00f3n aceptar. alert(\"Bienvenido Agust\u00edn\"); A trav\u00e9s del m\u00e9todo confirm() se activa un cuadro de di\u00e1logo que contiene los botones Aceptar y Cancelar. * True \u2192 Se ha pulsado la opci\u00f3n aceptar (bot\u00f3n). * False \u2192 Se ha pulsado la opci\u00f3n cancelar (bot\u00f3n). Con ayuda de este m\u00e9todo el usuario puede decidir sobre preguntas concretas e influir de ese modo directamente en la p\u00e1gina. var respuesta; respuesta=confirm (\"\u00bfDesea cancelar la subscripci\u00f3n?\"); alert(\"Usted ha contestado que \"+respuesta); El m\u00e9todo prompt() abre un cuadro de di\u00e1logo en pantalla en el que se pide al usuario que introduzca alg\u00fan dato. Si se pulsa el bot\u00f3n Cancelar, el valor de devoluci\u00f3n es false/null. Pulsando en Aceptar se obtiene el valor true y la cadena de caracteres introducida se guarda para su posterior procesamiento. var provincia; provincia=prompt(\"Introduzca la provincia \",\"Granada\"); alert(\"Usted ha introducido la siguiente informaci\u00f3n \"+provincia) Template Literals Desde ES2015 tambi\u00e9n podemos poner una cadena entre ` (acento grave) y en ese caso podemos poner dentro variables y expresiones que ser\u00e1n evaluadas al ponerlas dentro de ${} . Tambi\u00e9n se respetan los saltos de l\u00ednea, tabuladores, etc que haya dentro. let edad=40 console.log(`El usuario tiene: ${edad} a\u00f1os`) 5. Operadores Combinando variables y valores, se pueden formular expresiones m\u00e1s complejas. Las expresiones son una parte esencial de los programas. Para formular expresiones se utilizan los operadores. Operadores de asignaci\u00f3n Los operadores de asignaci\u00f3n se utilizan para asignar valores a las variables. Alguno de ellos tambi\u00e9n incluyen operaciones. Operador Descripci\u00f3n = Asigna a la variable de la parte izquierda el valor de la parte derecha. += Suma los operandos izquierdo y derecho y asigna el resultado al operando izquierdo. -= Resta el operando derecho del operando izquierdo y asigna el resultado al operando izquierdo. *= Multiplica ambos operandos y asigna el resultado al operando izquierdo. /= Divide ambos operandos y asigna el resultado al operando izquierdo. %= Divide ambos operandos y asigna el resto al operando izquierdo. var num1=3; var num2=5; num2+=num1; num2-=num1; num2*=num1; num2/=num1; num2%=num1; Operadores aritm\u00e9ticos Los operadores aritm\u00e9ticos se utilizan para hacer c\u00e1lculos aritm\u00e9ticos. Operador Descripci\u00f3n + Sumar - Restar * Multiplicar / Dividir % Calcular resto de una divisi\u00f3n Adem\u00e1s de estos operadores, tambi\u00e9n existen operadores aritm\u00e9ticos unitarios: incremento (++), disminuci\u00f3n (--) y la negaci\u00f3n unitaria (-). Los operadores de incremento y disminuci\u00f3n pueden estar tanto delante como detr\u00e1s de una variable. Estos operadores aumentan o disminuyen en 1, respectivamente, el valor de una variable. La diferencia entre ambas posiciones reside en el momento en que se ejecuta la operaci\u00f3n. Operador (x=5) Descripci\u00f3n y= ++ x Primero el incremento y despu\u00e9s la asignaci\u00f3n. y=6 y = x++ Primero la asignaci\u00f3n y despu\u00e9s el incremento. y=5 y = -- x Primero el decremento y despu\u00e9s la asignaci\u00f3n. y=4 y = x-- Primero la asignaci\u00f3n y despu\u00e9s el decremento. y=5 y =-x Se asigna a y el valor negativo de x, pero x no var\u00eda. y=-5 var num1=5, num2=8,resultado1, resultado2; resultado1=((num1+num2)*200)/100; resultado2=resultado1%3; resultado1=++num1; resultado2=num2++; resultado1=--num1; resultado2=num2--; Operadores de comparaci\u00f3n Para comparar dos valores entre s\u00ed, se utiliza el operador de comparaci\u00f3n. Como valor de retorno se obtiene un valor l\u00f3gico o booleano: true o false. Operador Descripci\u00f3n == Devuelve el valor true cuando los dos operandos son iguales. != Devuelve el valor true cuando los dos operandos son distintos. > Devuelve el valor true cuando el operando de la izquierda es mayor que el de la derecha. < Devuelve el valor true cuando el operando de la derecha es menor que el de la izquierda. >= Devuelve el valor true cuando el operando de la izquierda es mayor o igual que el de la derecha. <= Devuelve el valor true cuando el operando de la derecha es menor o igual que el de la izquierda. var a=4;b=5; alert(\"El resultado de la expresi\u00f3n 'a==b' es igual a \"+(a==b)); alert(\"El resultado de la expresi\u00f3n 'a!=b' es igual a \"+(a!=b)); alert(\"El resultado de la expresi\u00f3n 'a>b' es igual a \"+(a>b)); alert(\"El resultado de la expresi\u00f3n 'a<b' es igual a \"+(a<b)); alert(\"El resultado de la expresi\u00f3n 'a>=b' es igual a \"+(a>=b)); alert(\"El resultado de la expresi\u00f3n 'a<=b' es igual a \"+(a<=b)); Operadores l\u00f3gicos Los operadores l\u00f3gicos se utilizan para el procesamiento de los valores booleanos. A su vez el valor que devuelven tambi\u00e9n es booleano: true o false. Operador Descripci\u00f3n && Y l\u00f3gica. El valor de devoluci\u00f3n es true cuando ambos operandos son verdaderos. || O l\u00f3gica. El valor de devoluci\u00f3n es true cuando alguno de los operandos es verdadero o lo son los dos. ! No l\u00f3gica. El valor de devoluci\u00f3n es true cuando el valor es falso. Ejemplo de resultado de distintas operaciones realizadas con operadores l\u00f3gicos. alert(\u201dresultado 'false&&false' es igual a \"+(false&&false)); alert(\"resultado 'false&&true' es igual a \"+(false&&true)); alert(\"resultado 'true&&false' es igual a \"+(true&&false)); alert(\"resultado 'true&&true' es igual a \"+(true&&true)); alert(\"resultado 'false||false' es igual a \"+(false||false)); alert(\u201cresultado 'false||true' es igual a \"+(false||true)); alert(\"resultado 'true||false' es igual a \"+(true||false)); alert(\"resultado 'true||true' es igual a \"+(true||true)); alert(\"resultado '!false' es igual a \"+(!false)); 6. Estructuras de control y bucles IF y ELSE Para controlar el flujo de informaci\u00f3n en los programas JavaScript existen una serie de estructuras condicionales y bucles que permiten alterar el orden secuencial de ejecuci\u00f3n. La instrucci\u00f3n if permite la ejecuci\u00f3n de un bloque u otro de instrucciones en funci\u00f3n de una condici\u00f3n. if (condici\u00f3n) { // bloque instrucciones,se ejecutan si la condici\u00f3n se cumple } else{ // bloque instrucciones, se ejecutan si la condici\u00f3n no se cumple } Las llaves solo son obligatorias cuando haya varias instrucciones seguidas pertenecientes a la ramificaci\u00f3n. Si no pones llaves, el if se aplicar\u00e1 \u00fanicamente a la siguiente instrucci\u00f3n(primera instrucci\u00f3n). let edadAna,edadLuis; edadAna=parseInt(prompt(\"Introduce la edad de Ana\",\"\")); edadLuis=parseInt(prompt(\"Introduce la edad de Luis\",\"\")); if (edadAna > edadLuis){ alert(\"Ana es mayor que Luis.\"); alert(` Ana tiene ${edadAna} a\u00f1os y Luis ${edadAna}`); } else{ alert(\"Ana es menor o de igual edad que Luis.\"); alert(\" Ana tiene \" + edadAna + \" a\u00f1os y Luis \" + edadLuis); } Para las condiciones ramificadas m\u00e1s complicadas, a menudo se utilizan las ramificaciones anidadas. En ellas se definen consultas if dentro de otras consultas if. var edadAna,edadLuis; edadAna=parseInt(prompt(\"Introduce la edad de Ana\",\"\")); edadLuis=parseInt(prompt(\"Introduce la edad de Luis\",\"\")); if (edadAna > edadLuis){ alert(\"Ana es mayor que Luis.\"); } else{ if (edadAna<edadLuis){ alert(\"Ana es menor que Luis.\"); }else{ alert(\"Ana tiene la misma edad que Luis.\"); } } alert(` Ana tiene ${edadAna} a\u00f1os y Luis ${edadAna}`); Bucle FOR Cuando la ejecuci\u00f3n de un programa llega a un bucle for, lo primero que hace es ejecutar la \u201cinicializaci\u00f3n del \u00edndice\u201d , que solo se ejecuta un vez, a continuaci\u00f3n analiza la \u201ccondici\u00f3n de prueba\u201d y si esta se cumple ejecuta las instrucciones del bucle. Cuando finaliza la ejecuci\u00f3n de las instrucciones del bucle se realiza la \u201cmodificaci\u00f3n del \u00edndice\u201d . for (inicializaci\u00f3n_\u00edndice; condici\u00f3n_prueba; Modificaci\u00f3n_\u00edndice){ // Bloque de instrucciones... } Ejemplo: n\u00fameros pares del 2 al 30 for (i=2;i<=30;i+=2) { alert(i); } alert(\" Ya se han escrito los n\u00fameros pares del 0 al 30\"); ### Bucle WHILE Con el bucle while se pueden ejecutar un grupo de instrucciones mientras se cumpla una condici\u00f3n. Si la condici\u00f3n nunca se cumple, entonces tampoco se ejecuta ninguna instrucci\u00f3n. while (condici\u00f3n){ // Bloque de instrucciones... } Ejemplo : Escribe los n\u00fameros pares de 0 a 30 i=2; while (i<=30) { alert (i); i+=2; } alert(\"Ya se han mostrado los n\u00fameros pares del 0 al 30\"); Bucle DO-WHILE La diferencia del bucle do-while frente al bucle while reside en el momento en que se comprueba la condici\u00f3n: El bucle do-while no la comprueba hasta el final. Lo que significa que el bucle do-while se recorrer\u00e1, una vez, como m\u00ednimo, aunque no se cumpla la condici\u00f3n. do { // Bloque de instrucciones... } while(condici\u00f3n) Ejemplo: Preguntar por una clave hasta que se introduzca la correcta do { auxclave=prompt(\"introduce la clave \",\"vivaYo\") } while (auxclave!=\"EstaeslaclaveJEJEJE\") alert (\"Has acertado la clave\"); Instrucciones BREAK y CONTINUE En los bucles for, while y do-while se pueden utilizar las instrucciones break y continue para modificar el comportamiento del bucle. Break \u2192 Hace que el bucle se interrumpa inmediatamente, aun cuando no se haya ejecutado todav\u00eda el bucle completo. Ejemplo: Pregunta por la clave y permitir tres respuestas incorrectas var auxclave=true , var numveces=0; while (auxclave != \"anonimo\" && auxclave){ auxclave=prompt(\"Introduce la clave \",\"\"); numveces++; if (numveces == 3) break; } if (auxclave==\"SuperClave\") alert(\"La clave es correcta\"); else alert(\"La clave no es correcta correcta\"); Continue \u2192 Hace retornar a la secuencia de ejecuci\u00f3n a la cabecera del bucle, volviendo a ejecutar la condici\u00f3n o a incrementar los \u00edndices cuando sea un bucle for. Ejemplo: Presenta todos los n\u00fameros pares del 0 al 50 excepto los que sean m\u00faltiplos de 3 var i; for (i=2;i<=50;i+=2){ if ((i%3)==0) continue; alert(i); } 7. Funciones Se declaran con la palabra reservada function y se les pasan los par\u00e1metros entre par\u00e9ntesis. La funci\u00f3n puede devolver un valor usando return ( si no tiene return es como si devolviera undefined ). ~~~ javascript function nombrefuncion (par\u00e1metro1, par\u00e1metro2...){ ... // Bloque de instrucciones ... //si la funci\u00f3n devuelve alg\u00fan valor a\u00f1adimos: return valor; } ~~~ Ejemplo:Funciones que devuelve la suma de dos valores que se pasan por par\u00e1metros y que escriben el nombre del profesor. // Definiciones de las funciones function suma (a,b){ return a+b; } function profe (){ alert (\"El profesor es: Agustin Aguilera\"); } // C\u00f3digo que se ejecuta let op1=5;op2=25; let resultado; // Llamadas a funciones resultado=suma(op1,op2); console.log (op1+\"+\"+op2+\"=\"+resultado); profe(); Uso del array arguments Tambi\u00e9n es posible acceder a los par\u00e1metros desde el array arguments[] si no sabemos cu\u00e1ntos recibiremos: function suma () { var result = 0; for (var i=0; i<arguments.length; i++) result += arguments[i]; return result; } Uso de funciones an\u00f3nimas Podemos definir una funci\u00f3n sin darle un nombre. Dicha funci\u00f3n puede asignarse a una variable, autoejecutarse o asignarse a un manejador de eventos. var suma = function (a,b){ return a+b; } funciones lambda o funciones flecha Para escribir la sintaxis de una funci\u00f3n flecha, debemos tener en consideraci\u00f3n : Eliminamos la palabra function Ponemos el s\u00edmbolo => Si s\u00f3lo tiene 1 par\u00e1metro podemos eliminar los par\u00e9ntesis de los par\u00e1metros Si la funci\u00f3n s\u00f3lo tiene 1 l\u00ednea podemos eliminar las { } y la palabra return // Funci\u00f3n an\u00f3nima var suma = function (a,b){ return a+b; } // Funci\u00f3n flecha var suma = (a,b) => {return a+ b} var suma = (a,b) => a+ b 8. Variables locales y globales Ahora que ya conocemos las funciones es muy importante diferenciar entre variables globales y locales: Variables globales \u2192 Pueden utilizarse en cualquier parte del c\u00f3digo y son declaradas fuera de toda funci\u00f3n. Variables locales \u2192 Se definen con la instrucci\u00f3n let dentro de una funci\u00f3n y solo pueden ser utilizadas dentro de esta. var v_global1=20; function prueba(){ let v_local1=10; //Definici\u00f3n de variable local let v_local2=v_global1+v_local1; //En la funci\u00f3n se puede acceder a las variables globales // y locales definidas dentro de ella alert (\"Suma de v. local y la global : \"+ v_local2); } prueba(); alert (\"La variable global es \"+vbleglobal1); //Desde fuera de la funci\u00f3n las variables locales definidas en ella no son accesibles","title":"UD 2"},{"location":"Unidad_2/#1-introduccion","text":"Javascript es un lenguaje de programaci\u00f3n que permite ejecutar c\u00f3digo en el cliente ( nuestro navegador ) ampliando la funcionalidad nuestros sitios web. Para a\u00f1adir JavaScript se usa la etiqueta script . Este puede estar en cualquier lugar de la p\u00e1gina. El c\u00f3digo se ejecuta de forma secuencial a como el navegador lo va encontrando. <SCRIPT LANGUAGE=\"JavaScript\"> <!-- Aqu\u00ed va el c\u00f3digo // Esto es un comentario en Javascript de una linea --> </SCRIPT>","title":"1. INTRODUCCI\u00d3N"},{"location":"Unidad_2/#2-comentarios","text":"En Javascript los comentarios se pueden hacer con: // \u2192 Comentarios de una l\u00ednea. /* */ \u2192 Comentarios de varias l\u00edneas. Desde Javascript es posible reescribir el c\u00f3digo HTML de la p\u00e1gina mediante la orden document.write( texto ) Este ejemplo podr\u00eda ser un peque\u00f1o \"hola mundo\" que al ejecutarse modificar\u00e1 el HTML de la p\u00e1gina. <SCRIPT LANGUAGE=\"JavaScript\"> document.write (\"Hola mundo\"); /* Esto es un comentario en Javascript multilinea */ </SCRIPT> Otra v\u00eda para mostrar informaci\u00f3n al usuario desde una ventana emergente, es el comando alert( texto ). <SCRIPT LANGUAGE=\"JavaScript\"> alert(\"Hola mundo\"); </SCRIPT> Hay una forma mucho m\u00e1s pr\u00e1ctica y ordenada de usar c\u00f3digo Javascript. Se pueden incluir uno o varios ficheros con c\u00f3digo Javascript. Se pueden incluir tantos como se desee. Un ejemplo de inclusi\u00f3n de ficheros. <script type=\"text/javascript\" src=\"rutaDelArchivo1.js\"/> <script type=\"text/javascript\" src=\"rutaDelArchivo2.js\"/> <script type=\"text/javascript\" src=\"rutaDelArchivo3.js\"/>","title":"2. Comentarios"},{"location":"Unidad_2/#3-variables","text":"Las variables son elementos del lenguaje que permiten almacenar distintos valores en cada momento. Se puede almacenar un valor en una variable y consultar este valor posteriormente. Tambi\u00e9n podemos modificar su contenido siempre que queramos. Para declarar las variables en JavaScript se utiliza la palabra reservada var . var ejemplo; var resultado; ejemplo= \"Hola\"; resultado=3+7; En JavaScript todas las variables y nombres de funci\u00f3n son sensibles a may\u00fasculas y min\u00fasculas . Esto significa que la capitalizaci\u00f3n importa. Escribe los nombres de las variables en JavaScript en camelCase . En camelCase, los nombres de variables de m\u00faltiples palabras tienen la primera palabra en min\u00fasculas y la primera letra de cada palabra posterior en may\u00fasculas.","title":"3. Variables "},{"location":"Unidad_2/#tipos-de-variables","text":"JavaScript proporciona ocho tipos de datos diferentes: undefined , null, boolean, string, symbol, bigint, number, y object. N\u00fameros , puede contener cualquier tipo de n\u00famero real (0.3,1.7,2.9) o entero (5,3,-1). Operadores, l\u00f3gicos o boolean : puede contener uno de los siguientes valores: true, false, 1 y 0. Cadenas de caracteres o String , cualquier combinaci\u00f3n de caracteres (letras, n\u00fameros, signos especiales y espacios). Las cadenas se delimitan mediante comillas dobles o simples (\u201cLolo\u201d,\u201dlalO\u201d). Para concatenar cadenas puede usarse el operador + (\u201cSoy\u201d + \u201c el \u201c + \u201c AMO\u201d formar\u00eda la cadena \u201cSoy el AMO\u201d). Undefined : Valor no definido, es decir, la variable no tiene asignado un valor. var edad=23, nueva_edad, incremento; var nombre=\"Rosa Garc\u00eda\"; incremento=4; nueva_edad=edad+incremento; alert(nombre+ \" dentro de \"+incremento +\" a\u00f1os tendr\u00e1 \"+ nueva_edad+\"a\u00f1os\"); Puedes utilizar la funci\u00f3n typeof para consultar el tipo de la variable o dato: console.log(typeof(5)) ### Arrays Un array (tambi\u00e9n llamado vector o arreglo) es una variable que contiene diversos valores. Lo creamos con \u201cnew Array()\u201d o inicializando los elementos. Podemos referenciar esos valores indicando su posici\u00f3n en el array. Los arrays poseen una propiedad llamada \u201clength\u201d que podemos utilizar para conocer el n\u00famero de elementos del array. // Array definido 1 a 1 var miVector=new Array(); miVector[0]=22; miVector[1]=12; miVector[2]=33; //Array definido en una linea var otroArray=[1,2,\"Cancamusa\"]; // Valores dentro del array alert(miVector[1]); alert(otroArray[2]); // Valor completo del array alert(miVector); // Tama\u00f1o del array alert(miVector.length); ### Conversiones entre tipos Javascript no define expl\u00edcitamente el tipo de datos de sus variables. Seg\u00fan se almacenen, pueden ser cadenas (Entrecomillados), enteros (sin parte decimal) o decimales (con parte decimal). Elementos como la funci\u00f3n \u201cprompt\u201d para leer de teclado, leen los elementos siempre como cadena. Para estos casos y otros, merece la pena usar funciones de conversi\u00f3n de datos. var num=\u201d100\u201d; // Es una cadena var num2=\u201d100.13\u201d; // Es una cadena var num3=11; // Es un entero var n=parseInt(num); // Almacena un entero. var n2=parseFloat(num); // Almacena un decimal var n3=num3.toString(); // Almacena una cadena","title":"Tipos de variables"},{"location":"Unidad_2/#4-mostrar-por-pantalla-y-leer-del-teclado","text":"","title":"4. Mostrar por pantalla y leer del teclado"},{"location":"Unidad_2/#alert-confirm-prompt","text":"El m\u00e9todo alert() permite mostrar al usuario informaci\u00f3n literal o el contenido de variables en una ventana independiente. La ventana contendr\u00e1 la informaci\u00f3n a mostrar y el bot\u00f3n aceptar. alert(\"Bienvenido Agust\u00edn\"); A trav\u00e9s del m\u00e9todo confirm() se activa un cuadro de di\u00e1logo que contiene los botones Aceptar y Cancelar. * True \u2192 Se ha pulsado la opci\u00f3n aceptar (bot\u00f3n). * False \u2192 Se ha pulsado la opci\u00f3n cancelar (bot\u00f3n). Con ayuda de este m\u00e9todo el usuario puede decidir sobre preguntas concretas e influir de ese modo directamente en la p\u00e1gina. var respuesta; respuesta=confirm (\"\u00bfDesea cancelar la subscripci\u00f3n?\"); alert(\"Usted ha contestado que \"+respuesta); El m\u00e9todo prompt() abre un cuadro de di\u00e1logo en pantalla en el que se pide al usuario que introduzca alg\u00fan dato. Si se pulsa el bot\u00f3n Cancelar, el valor de devoluci\u00f3n es false/null. Pulsando en Aceptar se obtiene el valor true y la cadena de caracteres introducida se guarda para su posterior procesamiento. var provincia; provincia=prompt(\"Introduzca la provincia \",\"Granada\"); alert(\"Usted ha introducido la siguiente informaci\u00f3n \"+provincia)","title":"alert() , confirm(), prompt()"},{"location":"Unidad_2/#template-literals","text":"Desde ES2015 tambi\u00e9n podemos poner una cadena entre ` (acento grave) y en ese caso podemos poner dentro variables y expresiones que ser\u00e1n evaluadas al ponerlas dentro de ${} . Tambi\u00e9n se respetan los saltos de l\u00ednea, tabuladores, etc que haya dentro. let edad=40 console.log(`El usuario tiene: ${edad} a\u00f1os`)","title":"Template Literals"},{"location":"Unidad_2/#5-operadores","text":"Combinando variables y valores, se pueden formular expresiones m\u00e1s complejas. Las expresiones son una parte esencial de los programas. Para formular expresiones se utilizan los operadores.","title":"5. Operadores"},{"location":"Unidad_2/#operadores-de-asignacion","text":"Los operadores de asignaci\u00f3n se utilizan para asignar valores a las variables. Alguno de ellos tambi\u00e9n incluyen operaciones. Operador Descripci\u00f3n = Asigna a la variable de la parte izquierda el valor de la parte derecha. += Suma los operandos izquierdo y derecho y asigna el resultado al operando izquierdo. -= Resta el operando derecho del operando izquierdo y asigna el resultado al operando izquierdo. *= Multiplica ambos operandos y asigna el resultado al operando izquierdo. /= Divide ambos operandos y asigna el resultado al operando izquierdo. %= Divide ambos operandos y asigna el resto al operando izquierdo. var num1=3; var num2=5; num2+=num1; num2-=num1; num2*=num1; num2/=num1; num2%=num1;","title":"Operadores de asignaci\u00f3n"},{"location":"Unidad_2/#operadores-aritmeticos","text":"Los operadores aritm\u00e9ticos se utilizan para hacer c\u00e1lculos aritm\u00e9ticos. Operador Descripci\u00f3n + Sumar - Restar * Multiplicar / Dividir % Calcular resto de una divisi\u00f3n Adem\u00e1s de estos operadores, tambi\u00e9n existen operadores aritm\u00e9ticos unitarios: incremento (++), disminuci\u00f3n (--) y la negaci\u00f3n unitaria (-). Los operadores de incremento y disminuci\u00f3n pueden estar tanto delante como detr\u00e1s de una variable. Estos operadores aumentan o disminuyen en 1, respectivamente, el valor de una variable. La diferencia entre ambas posiciones reside en el momento en que se ejecuta la operaci\u00f3n. Operador (x=5) Descripci\u00f3n y= ++ x Primero el incremento y despu\u00e9s la asignaci\u00f3n. y=6 y = x++ Primero la asignaci\u00f3n y despu\u00e9s el incremento. y=5 y = -- x Primero el decremento y despu\u00e9s la asignaci\u00f3n. y=4 y = x-- Primero la asignaci\u00f3n y despu\u00e9s el decremento. y=5 y =-x Se asigna a y el valor negativo de x, pero x no var\u00eda. y=-5 var num1=5, num2=8,resultado1, resultado2; resultado1=((num1+num2)*200)/100; resultado2=resultado1%3; resultado1=++num1; resultado2=num2++; resultado1=--num1; resultado2=num2--;","title":"Operadores aritm\u00e9ticos"},{"location":"Unidad_2/#operadores-de-comparacion","text":"Para comparar dos valores entre s\u00ed, se utiliza el operador de comparaci\u00f3n. Como valor de retorno se obtiene un valor l\u00f3gico o booleano: true o false. Operador Descripci\u00f3n == Devuelve el valor true cuando los dos operandos son iguales. != Devuelve el valor true cuando los dos operandos son distintos. > Devuelve el valor true cuando el operando de la izquierda es mayor que el de la derecha. < Devuelve el valor true cuando el operando de la derecha es menor que el de la izquierda. >= Devuelve el valor true cuando el operando de la izquierda es mayor o igual que el de la derecha. <= Devuelve el valor true cuando el operando de la derecha es menor o igual que el de la izquierda. var a=4;b=5; alert(\"El resultado de la expresi\u00f3n 'a==b' es igual a \"+(a==b)); alert(\"El resultado de la expresi\u00f3n 'a!=b' es igual a \"+(a!=b)); alert(\"El resultado de la expresi\u00f3n 'a>b' es igual a \"+(a>b)); alert(\"El resultado de la expresi\u00f3n 'a<b' es igual a \"+(a<b)); alert(\"El resultado de la expresi\u00f3n 'a>=b' es igual a \"+(a>=b)); alert(\"El resultado de la expresi\u00f3n 'a<=b' es igual a \"+(a<=b));","title":"Operadores de comparaci\u00f3n"},{"location":"Unidad_2/#operadores-logicos","text":"Los operadores l\u00f3gicos se utilizan para el procesamiento de los valores booleanos. A su vez el valor que devuelven tambi\u00e9n es booleano: true o false. Operador Descripci\u00f3n && Y l\u00f3gica. El valor de devoluci\u00f3n es true cuando ambos operandos son verdaderos. || O l\u00f3gica. El valor de devoluci\u00f3n es true cuando alguno de los operandos es verdadero o lo son los dos. ! No l\u00f3gica. El valor de devoluci\u00f3n es true cuando el valor es falso. Ejemplo de resultado de distintas operaciones realizadas con operadores l\u00f3gicos. alert(\u201dresultado 'false&&false' es igual a \"+(false&&false)); alert(\"resultado 'false&&true' es igual a \"+(false&&true)); alert(\"resultado 'true&&false' es igual a \"+(true&&false)); alert(\"resultado 'true&&true' es igual a \"+(true&&true)); alert(\"resultado 'false||false' es igual a \"+(false||false)); alert(\u201cresultado 'false||true' es igual a \"+(false||true)); alert(\"resultado 'true||false' es igual a \"+(true||false)); alert(\"resultado 'true||true' es igual a \"+(true||true)); alert(\"resultado '!false' es igual a \"+(!false));","title":"Operadores l\u00f3gicos"},{"location":"Unidad_2/#6-estructuras-de-control-y-bucles","text":"","title":"6. Estructuras de control y bucles "},{"location":"Unidad_2/#if-y-else","text":"Para controlar el flujo de informaci\u00f3n en los programas JavaScript existen una serie de estructuras condicionales y bucles que permiten alterar el orden secuencial de ejecuci\u00f3n. La instrucci\u00f3n if permite la ejecuci\u00f3n de un bloque u otro de instrucciones en funci\u00f3n de una condici\u00f3n. if (condici\u00f3n) { // bloque instrucciones,se ejecutan si la condici\u00f3n se cumple } else{ // bloque instrucciones, se ejecutan si la condici\u00f3n no se cumple } Las llaves solo son obligatorias cuando haya varias instrucciones seguidas pertenecientes a la ramificaci\u00f3n. Si no pones llaves, el if se aplicar\u00e1 \u00fanicamente a la siguiente instrucci\u00f3n(primera instrucci\u00f3n). let edadAna,edadLuis; edadAna=parseInt(prompt(\"Introduce la edad de Ana\",\"\")); edadLuis=parseInt(prompt(\"Introduce la edad de Luis\",\"\")); if (edadAna > edadLuis){ alert(\"Ana es mayor que Luis.\"); alert(` Ana tiene ${edadAna} a\u00f1os y Luis ${edadAna}`); } else{ alert(\"Ana es menor o de igual edad que Luis.\"); alert(\" Ana tiene \" + edadAna + \" a\u00f1os y Luis \" + edadLuis); } Para las condiciones ramificadas m\u00e1s complicadas, a menudo se utilizan las ramificaciones anidadas. En ellas se definen consultas if dentro de otras consultas if. var edadAna,edadLuis; edadAna=parseInt(prompt(\"Introduce la edad de Ana\",\"\")); edadLuis=parseInt(prompt(\"Introduce la edad de Luis\",\"\")); if (edadAna > edadLuis){ alert(\"Ana es mayor que Luis.\"); } else{ if (edadAna<edadLuis){ alert(\"Ana es menor que Luis.\"); }else{ alert(\"Ana tiene la misma edad que Luis.\"); } } alert(` Ana tiene ${edadAna} a\u00f1os y Luis ${edadAna}`);","title":"IF y ELSE"},{"location":"Unidad_2/#bucle-for","text":"Cuando la ejecuci\u00f3n de un programa llega a un bucle for, lo primero que hace es ejecutar la \u201cinicializaci\u00f3n del \u00edndice\u201d , que solo se ejecuta un vez, a continuaci\u00f3n analiza la \u201ccondici\u00f3n de prueba\u201d y si esta se cumple ejecuta las instrucciones del bucle. Cuando finaliza la ejecuci\u00f3n de las instrucciones del bucle se realiza la \u201cmodificaci\u00f3n del \u00edndice\u201d . for (inicializaci\u00f3n_\u00edndice; condici\u00f3n_prueba; Modificaci\u00f3n_\u00edndice){ // Bloque de instrucciones... } Ejemplo: n\u00fameros pares del 2 al 30 for (i=2;i<=30;i+=2) { alert(i); } alert(\" Ya se han escrito los n\u00fameros pares del 0 al 30\"); ### Bucle WHILE Con el bucle while se pueden ejecutar un grupo de instrucciones mientras se cumpla una condici\u00f3n. Si la condici\u00f3n nunca se cumple, entonces tampoco se ejecuta ninguna instrucci\u00f3n. while (condici\u00f3n){ // Bloque de instrucciones... } Ejemplo : Escribe los n\u00fameros pares de 0 a 30 i=2; while (i<=30) { alert (i); i+=2; } alert(\"Ya se han mostrado los n\u00fameros pares del 0 al 30\");","title":"Bucle FOR"},{"location":"Unidad_2/#bucle-do-while","text":"La diferencia del bucle do-while frente al bucle while reside en el momento en que se comprueba la condici\u00f3n: El bucle do-while no la comprueba hasta el final. Lo que significa que el bucle do-while se recorrer\u00e1, una vez, como m\u00ednimo, aunque no se cumpla la condici\u00f3n. do { // Bloque de instrucciones... } while(condici\u00f3n) Ejemplo: Preguntar por una clave hasta que se introduzca la correcta do { auxclave=prompt(\"introduce la clave \",\"vivaYo\") } while (auxclave!=\"EstaeslaclaveJEJEJE\") alert (\"Has acertado la clave\");","title":"Bucle DO-WHILE"},{"location":"Unidad_2/#instrucciones-break-y-continue","text":"En los bucles for, while y do-while se pueden utilizar las instrucciones break y continue para modificar el comportamiento del bucle. Break \u2192 Hace que el bucle se interrumpa inmediatamente, aun cuando no se haya ejecutado todav\u00eda el bucle completo. Ejemplo: Pregunta por la clave y permitir tres respuestas incorrectas var auxclave=true , var numveces=0; while (auxclave != \"anonimo\" && auxclave){ auxclave=prompt(\"Introduce la clave \",\"\"); numveces++; if (numveces == 3) break; } if (auxclave==\"SuperClave\") alert(\"La clave es correcta\"); else alert(\"La clave no es correcta correcta\"); Continue \u2192 Hace retornar a la secuencia de ejecuci\u00f3n a la cabecera del bucle, volviendo a ejecutar la condici\u00f3n o a incrementar los \u00edndices cuando sea un bucle for. Ejemplo: Presenta todos los n\u00fameros pares del 0 al 50 excepto los que sean m\u00faltiplos de 3 var i; for (i=2;i<=50;i+=2){ if ((i%3)==0) continue; alert(i); }","title":"Instrucciones BREAK y CONTINUE"},{"location":"Unidad_2/#7-funciones","text":"Se declaran con la palabra reservada function y se les pasan los par\u00e1metros entre par\u00e9ntesis. La funci\u00f3n puede devolver un valor usando return ( si no tiene return es como si devolviera undefined ). ~~~ javascript function nombrefuncion (par\u00e1metro1, par\u00e1metro2...){ ... // Bloque de instrucciones ... //si la funci\u00f3n devuelve alg\u00fan valor a\u00f1adimos: return valor; } ~~~ Ejemplo:Funciones que devuelve la suma de dos valores que se pasan por par\u00e1metros y que escriben el nombre del profesor. // Definiciones de las funciones function suma (a,b){ return a+b; } function profe (){ alert (\"El profesor es: Agustin Aguilera\"); } // C\u00f3digo que se ejecuta let op1=5;op2=25; let resultado; // Llamadas a funciones resultado=suma(op1,op2); console.log (op1+\"+\"+op2+\"=\"+resultado); profe();","title":"7. Funciones"},{"location":"Unidad_2/#uso-del-array-arguments","text":"Tambi\u00e9n es posible acceder a los par\u00e1metros desde el array arguments[] si no sabemos cu\u00e1ntos recibiremos: function suma () { var result = 0; for (var i=0; i<arguments.length; i++) result += arguments[i]; return result; }","title":"Uso del array arguments"},{"location":"Unidad_2/#uso-de-funciones-anonimas","text":"Podemos definir una funci\u00f3n sin darle un nombre. Dicha funci\u00f3n puede asignarse a una variable, autoejecutarse o asignarse a un manejador de eventos. var suma = function (a,b){ return a+b; }","title":"Uso de funciones an\u00f3nimas"},{"location":"Unidad_2/#funciones-lambda-o-funciones-flecha","text":"Para escribir la sintaxis de una funci\u00f3n flecha, debemos tener en consideraci\u00f3n : Eliminamos la palabra function Ponemos el s\u00edmbolo => Si s\u00f3lo tiene 1 par\u00e1metro podemos eliminar los par\u00e9ntesis de los par\u00e1metros Si la funci\u00f3n s\u00f3lo tiene 1 l\u00ednea podemos eliminar las { } y la palabra return // Funci\u00f3n an\u00f3nima var suma = function (a,b){ return a+b; } // Funci\u00f3n flecha var suma = (a,b) => {return a+ b} var suma = (a,b) => a+ b","title":"funciones lambda o funciones flecha"},{"location":"Unidad_2/#8-variables-locales-y-globales","text":"Ahora que ya conocemos las funciones es muy importante diferenciar entre variables globales y locales: Variables globales \u2192 Pueden utilizarse en cualquier parte del c\u00f3digo y son declaradas fuera de toda funci\u00f3n. Variables locales \u2192 Se definen con la instrucci\u00f3n let dentro de una funci\u00f3n y solo pueden ser utilizadas dentro de esta. var v_global1=20; function prueba(){ let v_local1=10; //Definici\u00f3n de variable local let v_local2=v_global1+v_local1; //En la funci\u00f3n se puede acceder a las variables globales // y locales definidas dentro de ella alert (\"Suma de v. local y la global : \"+ v_local2); } prueba(); alert (\"La variable global es \"+vbleglobal1); //Desde fuera de la funci\u00f3n las variables locales definidas en ella no son accesibles","title":"8. Variables locales y globales"},{"location":"Unidad_3/","text":"1. JERARQU\u00cdA DE OBJETOS NATIVOS DE JAVASCRIPT Entre otras posibilidades, Javascript es un lenguaje que de forma nativa posee gran cantidad de funciones y objetos predefinidos. Estas funciones y objetos nos pueden ser \u00fatiles para realizar un c\u00f3digo mas eficiente, claro y ahorrarnos tiempo re-inventado la rueda. JavaScript define una jerarqu\u00eda de objetos que podemos reflejar de forma aproximada en un esquema similar al siguiente: Para el desarrollo del m\u00f3dulo vamos a considerar las siguientes clasificaciones de objetos: * Objetos Importantes * document , windows * Objetos del navegador * Navigator, Screen, Location, History * Objetos del lenguaje * Object, Boolean, Number, Math, Date, String, Array, RegExp * Objetos DOM * Form, Link, Input, Button, Meta, Image, Area, Style * Objetos definidos por el usuario. 2. OBJETOS IMPORTANTES Windows El objeto Window es un objeto que tiene propiedades y controla elementos de lo que ocurre en la \"ventana\" del navegador. Los m\u00e9todos que estudiamos en el tema anterior como alert, prompt, etc. forman parte del objeto Window.Para hacer llamada a estos m\u00e9todos no hace falta nombrar expl\u00edcitamente Window (el navegador ya se encarga de ello). Algunos de los m\u00e9todos mas importantes no estudiados previamente son: * setTimeout(cadenaFuncion,tiempo): Este m\u00e9todo ejecuta la llamada a la funci\u00f3n proporcionada por la cadena (se puede construir una cadena que lleve par\u00e1metros) y la ejecuta pasados los milisegundos que hay en la variable tiempo. Devuelve un identificador del \"setTimeout\" que nos servir\u00e1 para referenciarlo si deseamos cancelarlo. SetTimeout solo ejecuta la orden una vez. * setInterval(cadenaFunci\u00f3n, tiempo): Exactamente igual que setTimeout, con la salvedad de que no se ejecuta una vez, sino que se repite c\u00edclicamente cada vez que pasa el tiempo proporcionado. * clearTimeout / clearInterval (id): Se le pasa el identificador del timeout/interval y lo anula. // Creamos un intervalo que cada 15 segundos muestra mensaje hola let idA=setInterval(\"alert('hola');\",15000); // Creamos un timeout que cuando pasen 3 segundos muestra mensaje adios let idB=setTimeout(\"alert('adios');\",3000); // Creamos un timeout que cuando pasen 5 segundos muestra mensaje let idC=setTimeout(\"alert('esto-no-seve');\",5000); // Cancelamos el ultimo timeout clearTimeout(idC); 2.2 Document Cada documento cargado en una ventana del navegador, ser\u00e1 un objeto de tipo document. El objeto document proporciona a los scripts, el acceso a todos los elementos HTML dentro de una p\u00e1gina. Este objeto forma parte adem\u00e1s del objeto window , y puede ser accedido a trav\u00e9s de la propiedad window.document o directamente document (ya que podemos omitir la referencia a la window actual). El objeto document nos permite acceder a las siguientes colecciones : Colecci\u00f3n Descripci\u00f3n anchors[] Es un array que contiene todos los hiperenlaces del documento. applets[] Es un array que contiene todos los applets del documento. forms[] Es un array que contiene todos los formularios del documento. images[] Es un array que contiene todas las im\u00e1genes del documento. links[] Es un array que contiene todos los enlaces del documento. El objeto document nos permite acceder a las siguientes propiedades y m\u00e9todos: Propiedad/M\u00e9todo Descripci\u00f3n cookie Devuelve todos los nombres/valores de las cookies en el documento domain Cadena que contiene el nombre de dominio del servidor que carg\u00f3 el documento. lastModified Devuelve la fecha y hora de la \u00faltima modificaci\u00f3n del documento readyState Devuelve el estado de carga del documento actual referrer Cadena que contiene la URL del documento desde el cu\u00e1l llegamos al documento actual title Devuelve o ajusta el t\u00edtulo del documento. URL Devuelve la URL completa del documento. getElementById() Para acceder a un elemento identificado por el id escrito entre par\u00e9ntesis. open() Abre el flujo de escritura para poder utilizar document.write() o document.writeln en el documento. close() Cierra el flujo abierto previamente con document.open(). write() Para poder escribir expresiones HTML o c\u00f3digo de JavaScript dentro de un documento. 3. GESTI\u00d3N DE VENTANAS JavaScript permite gestionar diferentes aspectos relacionados con las ventanas como por ejemplo, abrir nuevas ventanas al presionar un bot\u00f3n. Cada una de estas ventanas tiene un tama\u00f1o, posici\u00f3n y estilo diferente. Aclarar que estas ventanas emergentes suelen tener un contenido din\u00e1mico. Abrir una Ventana Es una operaci\u00f3n muy com\u00fan en las p\u00e1ginas web y en algunas ocasiones se abren sin que el usuario haga nada. HTML permite abrir nuevas ventanas pero no permite ning\u00fan control posterior sobre ellas. Con JavaScript es posible abrir una ventana vac\u00eda mediante el m\u00e9todo open(): nuevaVentana = window.open(); El m\u00e9todo open(), cuenta con cuatro par\u00e1metros y todos son opcionales: * URL. * Nombre de la ventana. * Colecci\u00f3n de atributos que definen la apariencia de la ventana. * True ( URL reemplaza al documento actual ), false ( lo a\u00f1ade ) nuevaVentana=window.open(\"http://www.misitioWeb.com/ads\",\"Publicidad\",\"height=100, width=100\"); Cerrar una Ventana Para cerrar una ventana se puede invocar el m\u00e9todo close(): myWindow1.document.write('<input type=button value=Cerrar onClick=window.close()>'); Comunicaci\u00f3n entre Ventanas Desde una ventana se pueden abrir o cerrar nuevas ventanas. La primera se denomina ventana principal, mientras que las segundas se denominan ventanas secundarias. Desde la ventana principal se puede acceder a las ventanas secundarias. En el siguiente ejemplo se muestra c\u00f3mo acceder a una ventana secundaria: <script> function abrirVentana(){ let ventanaSecundaria = window.open(\"\", \"VentanaSec\",\"width=500,height=500\"); ventanaSecundaria.document.write(document.getElementByID(\"idUrl\").value); } </script> <h1> Comunicaci\u00f3n entre ventanas </h1> <form name=\"formulario\"> <input id=\"idUrl\" type=\"text\" name=\"url\" size=50 value=\"http://www.\"> <input type=\"button\" value=\"Mostrar URL en ventana secundaria\" onclik=\"abrirVentana()\"> </form> 4. ARRAYS Son un tipo de objeto y no tienen tama\u00f1o fijo sino que podemos a\u00f1adirle elementos en cualquier momento. Podemos crearlos como instancias del objeto Array: let a=new Array(); // a = [] let b=new Array(2,4,6); // b = [2, 4, 6] Pero lo recomendado es crearlos usando notaci\u00f3n JSON (recomendado): let a=[]; let b=[2,4,6]; Sus elementos pueden ser de cualquier tipo, incluso podemos tener elementos de tipos distintos en un mismo array. Si no est\u00e1 definido un elemento su valor ser\u00e1 undefined. Ej.: let a=['Lunes', 'Martes', 2, 4, 6]; console.log(a[0]); // imprime 'Lunes' console.log(a[4]); // imprime 6 a[7]='Juan'; // ahora a=['Lunes', 'Martes', 2, 4, 6, , , 'Juan'] console.log(a[7]); // imprime 'Juan' console.log(a[6]); // imprime undefined 4.1 Propiedades de un array Length \u2192 Esta propiedad devuelve la longitud de un array: let a=['Lunes', 'Martes', 2, 4, 6]; console.log(a.length); // imprime 5 Podemos reducir el tama\u00f1o de un array cambiando esta propiedad: a.length=3; // ahora a=['Lunes', 'Martes', 2] A\u00f1adir un elemento A\u00f1adir/Eliminar Elementos M\u00e9todo Descripci\u00f3n . push ( elemento ) A\u00f1ade uno o varios elementos al final del array. . pop () Elimina y devuelve el \u00faltimo elemento del array. . unshift ( elemento ) A\u00f1ade uno o varios elementos al inicio del array. . shift () Elimina y devuelve el primer elemento del array. . concat ( elemento ) Concatena los elementos (o elementos de los arrays) pasados por par\u00e1metro. Podemos a\u00f1adir elementos al final de un array con push o al principio con unshift: let a=['Lunes', 'Martes', 2, 4, 6]; a.push('Juan'); // a=['Lunes', 'Martes', 2, 4, 6, 'Juan'] a.unshift(7); // a=[7, 'Lunes', 'Martes', 2, 4, 6, 'Juan'] Podemos borrar el elemento del final de un array con pop o el del principio con shift. Ambos m\u00e9todos devuelven el elemento que hemos borrado: let a=['Lunes', 'Martes', 2, 4, 6]; let ultimo=a.pop(); // a=['Lunes', 'Martes', 2, 4] y ultimo=6 let primero=a.shift(); // a=['Martes', 2, 4] y primero='Lunes'4.3 Crear un array derivado Crear array derivado M\u00e9todo Descripci\u00f3n . slice ( inicio, num_elem ) Devuelve los elementos desde la posici\u00f3n \"inicio\". . join ( separador ) Construye una cadena, uniendo los elementos del array mediante el separador . split ( separador ) Construye un array, a partir de una cadena y un separador. Por ejemplo, Slice, Devuelve un subarray con los elementos indicados pero sin modificar el array original let a=['Lunes', 'Martes', 2, 4, 6]; let subArray=a.slice(1, 3); // a=['Lunes', 'Martes', 2, 4, 6] // subArray=['Martes', 2, 4]; Podemos convertir los elementos de un array a una cadena con .join() especificando el car\u00e1cter separadorde los elementos. let a=['Lunes', 'Martes', 2, 4, 6]; let cadena=a.join('-'); // cadena='Lunes-Martes-2-4-6' B\u00fasqueda y comprobaci\u00f3n M\u00e9todo Descripci\u00f3n Array.isArray( obj ) Comprueba si obj es un array. Devuelve true o false. includes( obj, from ) Comprueba si obj es uno de los elementos incluidos en el array. .indexOf( obj, from ) Devuelve la posici\u00f3n de la primera aparici\u00f3n de obj desde from. Includes \u2192 Devuelve true si el array incluye el elemento pasado como par\u00e1metro. Ejemplo: let arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]; arrayNotas.includes(7.5); // true Ordenaci\u00f3n M\u00e9todo Descripci\u00f3n . reverse() Invierte el orden de elementos del array. . sort() Ordena los elementos del array, ordenaci\u00f3n alfab\u00e9tica. let a=['hola','adios','Bien','Mal',2,5,13,45] let b=a.sort(); // b=[13, 2, 45, 5 , \"Bien\", \"Mal\", \"adios\", \"hola\"] Array Functions Son m\u00e9todos propios de arrays, que permiten operar sobre todos los elementos del array para alcanzar un objetivo concreto. Se les pasa una funci\u00f3n de callback que se ejecutar\u00e1 en cada uno de los elementos del array M\u00e9todo Descripci\u00f3n .forEach (cb, arg) Realiza la operaci\u00f3n definida en cb por cada elemento del array. .every (cb, arg) Comprueba si todos los elementos del array cumplen la condici\u00f3n de cb. .some (cb, arg) Comprueba si al menos un elemto del array cumple la condici\u00f3n de cb. .map (cb, arg) Construye un array con lo que devuelve cb por cada elemento del array. .findIndex (cb, arg) Devuelve la posici\u00f3n del elemento que cumple la condici\u00f3n de cb. .find (cb, arg) Devuelve el elemento que cumple la condici\u00f3n de cb. . sort( func ) Ordena los elementos del array bajo un criterio de ordenaci\u00f3n func. Resumiendo, las funciones anteriores pueden ser utilizadas para: let array = ['a', 'bb', 'bc', 'd']; array .forEach( function(e,i) { alert('Elemento.' + e + ' en la posici\u00f3n' + i); }); array .every( e => e.length == 1 ); // false array .some( e => e.length == 2 ); // true let nuevoArr = array .map( e => e.length ); // [1 , 2 , 2 , 1] let nuevoArr = array. filter ( e => e[0] == 'b' ); // [\u2018bb\u2019,\u2019bc\u2019] let valor = array. find ( e => e[0] == \u2018b\u2019); //\u2019bb\u2019 5. MAP Es una colecci\u00f3n de parejas de [clave,valor]. Un objeto en Javascript es un tipo particular de Map en que las claves s\u00f3lo pueden ser texto o n\u00fameros. M\u00e9todo Descripci\u00f3n . set ( clave , valor ) almacena el valor asociado a la clave. . get ( clave ) devuelve el valor de la clave. Ser\u00e1 \"undefined\" si la clave no existe en map. . has ( clave ) Devuelve truesi la clave existe en map,false si no existe. . delete ( clave ) elimina el valor de la clave. . clear () elimina todo de map. . size tama\u00f1o, devuelve la cantidad actual de elementos. let persona = new Map(); persona.set('nombre', \"Agustin\"); persona.set('apellido', \"Aguilera\"); persona.set('edad', 99); persona.get(\"edad\"); // 99 persona.size // 3 persona.delete(\"edad\") persona.size // 2 Para recorrer los valores del map utilizando el m\u00e9todo foreach: persona.forEach(function(valor,clave,mapa){ console.log(`valor : ${valor},clave : ${clave},tama\u00f1o: ${mapa.size}`); }) Otra alternativa ser\u00eda utilizar for.....of let persona = new Map([ ['nombre', 'Agustin'], ['apellido', 'Aguilera'], ['edad', 99] ]); for (const [clave, valor] of persona.entries()) { console.log(clave + ' = ' + valor) } 6. SET Es como un Map pero que no almacena los valores sino s\u00f3lo la clave. Podemos verlo como una colecci\u00f3n que no permite duplicados. Tiene la propiedad size que devuelve su tama\u00f1o y los m\u00e9todos . add (a\u00f1ade un elemento), . delete (lo elimina) o . has (indica si el elemento pasado se encuentra o no en la colecci\u00f3n) y tambi\u00e9n podemos recorrerlo con . forEach . M\u00e9todo Descripci\u00f3n . size Tama\u00f1o, devuelve la cantidad actual de elementos. . set ( valor ) Almacena el valor en la colecci\u00f3n. . has ( valor ) Devuelve true si el valor existe en el set, false si no existe. . delete ( valor ) Elimina el valor del set . clear () Elimina todo los valores de la colecci\u00f3n ~~. get ( valor )~~ \u00a1\u00a1 Funci\u00f3n no implementada en SET !! Una forma sencilla de eliminar los duplicados de un array es crear con \u00e9l un Set: let ganadores = ['M\u00e1rquez', 'Rossi', 'M\u00e1rquez', 'Lorenzo', 'Rossi', 'M\u00e1rquez', 'M\u00e1rquez']; let ganadoresNoDuplicados = new Set(ganadores); // {'M\u00e1rquez, 'Rossi', 'Lorenzo'} // volvemos a convertirlo en un Array. let ganadoresNoDuplicados = Array.from(new Set(ganadores)); // ['M\u00e1rquez, 'Rossi', 'Lorenzo'] 7. OBJETO NUMBER Number, es utilizado para valores enteros y decimales. NaN \u2192 N ot a N umber Constantes Constante Descripci\u00f3n Number. POSITIVE_INFINITY Infinito positivo: +\u221e Number. NEGATIVE_INFINITY Infinito negativo: -\u221e Comprobar n\u00fameros Propiedad Descripci\u00f3n Number.isFinite(n) Comprueba si n es un n\u00famero finito. Number.isInteger(n) Comprueba si n es un n\u00famero entero. Number.isNaN(n) Comprueba si n no es un n\u00famero. Conversi\u00f3n num\u00e9rica Propiedad Descripci\u00f3n Number.parseInt ( s) Convierte una cadena de texto s en un n\u00famero entero. Number.parseFloat ( s ) Convierte una cadena de texto s en un n\u00famero decimal. Representaci\u00f3n num\u00e9rica Propiedad Descripci\u00f3n .toExponential(n) Convierte el n\u00famero a notaci\u00f3n exponencial con n decimales. .toFixed(n) Convierte el n\u00famero a notaci\u00f3n de punto fijo con n decimales. .toPrecision(p) Utiliza p d\u00edgitos de precisi\u00f3n en el n\u00famero. let n = 4; // Literal Num\u00e9rico let nObj = new Number(4); // Objeto Num\u00e9rico //Costantes Number.MAX_VALUE Number.MIN_VALUE Number.NaN //M\u00c9TODOS Number.isNaN (NaN); //true, es un not a number Number.isNaN (4); //false, es un n\u00famero Number.isInteger (4);//true, Es un entero Number.isInteger (4.7); //false,Es un decimal Number.parseInt ('4');// Pasar a entero la cadena \u20184\u2019 Number.parseInt ('11101', 2); // 29, antes se especific\u00f3 en binario(b=2) (1234).toString();// \"1234\", pasa a cadena el valor num\u00e9rico. (1234).toString(2); // \"101101\", pasa a binario el valor num\u00e9rico. (1.5).toFixed(3);//1.500 , Punto fijo con 3 decimales (1.5).toExponential (2);// \"1.50e+0\" en exponencial (1.5).toFixed (2); // \"1.50\" en punto fijo (1.5).toPrecision (1); // \"2\" typeof n; // number 8. OBJETO MATH Constantes Propiedad Descripci\u00f3n Math.PI N\u00famero PI Math.SQRT2 Ra\u00edz cuadrada de 2 M\u00e9todos matem\u00e1ticos Propiedad Descripci\u00f3n Math.abs(x) Devuelve el valor absoluto de x. Math.exp(x) Exponente, Devuelve el n\u00famero e elevado a x. Math.max(a, b, c...) Devuelve el n\u00famero m\u00e1s grande de los indicados por par\u00e1metro. Math.min(a, b, c...) Devuelve el n\u00famero m\u00e1s peque\u00f1o de los indicados por par\u00e1metro. Math.sqrt(x) Devuelve la ra\u00edz cuadrada de x. Math.random() Devuelve un n\u00famero al azar entre 0 y 1 (con 16 decimales) M\u00e9todos de redondeo Propiedad Descripci\u00f3n Math.round(x) Devuelve el redondeo de x . Entero m\u00e1s cercano Math.ceil(x) Devuelve el redondeo superior de x. Entero m\u00e1s alto Math.floor(x) Devuelve el redondeo inferior de x. Entero m\u00e1s bajo Math.trunc(x) Devuelve la parte entera //Constantes Math.PI Math.abs (-5) //5,Valor absoluto Math.max (1,2,3,4) //4, M\u00e1ximo de la lista Math.min (1,2,3,4)//1, M\u00ednimo de la lista Math.pow (x,y)// x^y Math.sqrt (2)// Ra\u00edz cuadrada de 2 //M\u00e9todos Math.floor (4.7) //4, parte entera, con redondeo inferior Math.ceil (4.7)//5, parte entera, con redondeo superior Math.round (4.7)//5, parte entera, con redondeo al m\u00e1s cercano Math.trunc (4.7)//4, devuelve parte entera(truncamiento) // Trabajar con aleatorios Math.random(); // N\u00famero al azar entre [0, 1) con 16 decimales let x = Math .floor( Math .random () * 5); // N\u00famero entre 0 y 5. 9. OBJETO STRING Propiedades Propiedad Descripci\u00f3n . length Devuelve el n\u00famero de car\u00e1cteres de la variable de tipo string en cuesti\u00f3n. M\u00e9todos posicionales Propiedad Descripci\u00f3n .charAt ( pos ) Devuelve el car\u00e1cter en la posici\u00f3n pos de la variable. Similar a [] .concat ( str1, str2... ) Devuelve el texto de la variable unido a str1, a str2. Similar a + .indexOf ( str ) Devuelve la primera posici\u00f3n del texto str. .indexOf ( str, from ) Idem al anterior, partiendo desde la posici\u00f3n from. M\u00e9todos de b\u00fasqueda Propiedad Descripci\u00f3n . includes(s, from) Comprueba si el texto contiene el subtexto s desde la posici\u00f3n from. . search(regex) Busca si hay un patr\u00f3n que encaje con regex y devuelve la posici\u00f3n. . match(regex) Idem a la anterior, pero devuelve las coincidencias encontradas. M\u00e9todos de transformar Propiedad Descripci\u00f3n . repeat( n ) Devuelve el texto de la variable repetido n veces. . toLowerCase() Devuelve el texto de la variable en min\u00fasculas. . toUpperCase() Devuelve el texto sin espacios a la izquierda y derecha. . trim() Devuelve el texto sin espacios a la izquierda y derecha. . replace( regex, newstr ) Reemplaza la primera aparici\u00f3n del texto str por newstr. . replaceAll( regex, newstr ) Reemplaza todas las apariciones del texto str por newstr. . substr( ini, len ) Devuelve el subtexto desde la posici\u00f3n ini hasta ini+len. . split( regex, limit) Separa el texto usando sep como separador, en limit fragmentos. . padStart( len, str ) Rellena el principio de la cadena con str hasta llegar al tama\u00f1o len. . padEnd( len, str ) Rellena el final de la cadena con str hasta llegar al tama\u00f1o len. Concatenaci\u00f3n Propiedad Descripci\u00f3n + Concatenaci\u00f3n de cadenas y variables Backticks ${} Concatenaci\u00f3n de cadenas y variables (en ESMAC2015) let s = 'cadena'; // Literal Cadena let sObj = new String (\u2018cadena\u2019)// Objeto String // PROPIEDADES s.length // 6, n\u00famero de car\u015bcteres \u201cHola\u201d.lenght // 4, n\u00famero de car\u00e1cteres s[0] //c,primer caracter // M\u00c9TODOS s.charAt(1) // c, car\u00e1cter en la posici\u00f3n 1 s.indexOf(\u2018den\u2019) // 3, posici\u00f3n 1a ocurrencia cadena \u2018den\u2019, -1 no encontrado s.concat(\u201833\u2019,\u201944\u2019) // cadena3344, concatena todas las cadenas \"Manz\".concat(\"i\", \"to\"); // cadena3344, concatena todas las cadenas \"Manz\". includes (\"an\"); // true ('Manz' incluye 'an') \"Hola a todos\". search (/o/g); // busca globalmente las \"o\", 1, devuelve posici\u00f3n de la 1a o \"Hola a todos\". match (/o/g); // ['o', 'o', 'o'], las 3 \"o\" que encuentra \"Na\". repeat (5); // 'NaNaNaNaNa' \"MANZ\". toLowerCase (); // 'manz' \"manz\". toUpperCase ();// 'MANZ' \" Hola \". trim ();// 'Hola' \"Amigo\". replace (\"A\", \"Ene\");// 'Enemigo' \"Dispara\". replace (\"a\", \"i\"); // 'Dispira' (s\u00f3lo reemplaza la primera aparici\u00f3n) \"Dispara\". replace (/a/g, \"i\"); // 'Dispiri' (reemplaza todas las ocurrencias) \"Submarino\". substr (3); // 'marino' (desde el 3 en adelante) \"Submarino\". substr (3, 1); // 'm' (desde el 3, hasta el 3+1) (1:2:3:4). split( \u2018:\u2019 ) // Separamos por \",\" [1,2,3,4] \"C\u00f3digo\".split(\"\"); // ['C', '\u00f3', 'd', 'i', 'g', 'o'] (6 elementos) \"5\".padStart(6, \"0\");// '000005' \"A\".padEnd(5, \"\u00b7\"); // 'A\u00b7\u00b7\u00b7\u00b7' const sujeto = \"frase\"; const adjetivo = \"concatenada\"; \"Una \" + sujeto + \" bien \" + adjetivo;// Concatenaci\u00f3n antigua `Una ${sujeto} mejor ${adjetivo}` // Concatenaci\u00f3n actual 10. OBJETO DATE Constructores Propiedad Descripci\u00f3n new Date() Obtiene la fecha del momento actual. new Date( str ) Convierte el texto con formato YYYY/MM/DD HH:MM:SS a fecha. new Date( num ) Convierte el n\u00famero num, en formato Tiempo UNIX, a fecha UTC. new Date( y, m, d, h, min, s, ms ) Crea una fecha UTC a partir de componentes num\u00e9ricos*. Date.now() Devuelve el Tiempo UNIX de la fecha actual. Equivalente a +new Date(). Getter de fechas Propiedad Descripci\u00f3n .getDay() Devuelve el d\u00eda de la semana: OJO: 0 Domingo, 6 S\u00e1bado. .getFullYear() Devuelve el a\u00f1o con 4 cifras. .getMonth() Devuelve la representaci\u00f3n interna del mes. OJO: 0 Enero - 11 Diciembre. .getDate() Devuelve el d\u00eda del mes. .getHours() Devuelve la hora. OJO: Formato militar; 23 en lugar de 11. .getMinutes() Devuelve los minutos. .getSeconds() Devuelve los segundos. .getMilliseconds() Devuelve los milisegundos. .getTime() Devuelve el unix timestamp: segundos transcurridos desde 1/1/1970. .getTimezoneOffset() Diferencia horaria (en min) de la hora local respecto a UTC Setter de fechas Propiedad Descripci\u00f3n .setFullYear( year ) .setFullYear( y, m, d ) Altera el a\u00f1o de la fecha, cambi\u00e1ndolo por year. Formato de 4 d\u00edgitos. .setMonth( month ) .setMonth( m, d) Altera el mes de la fecha, cambi\u00e1ndolo por month. Ojo: 0-11 (Ene-Dic). .setDate( day ) Altera el d\u00eda de la fecha, cambi\u00e1ndolo por day. .setHour( hour ) .setHour( h, m, s, ms) Altera la hora de la fecha, cambi\u00e1ndola por hour. .setMinutes(min) .setMinutes( m, s, ms ) Altera los minutos de la fecha, cambi\u00e1ndolos por min. .setSeconds( sec ) .setSeconds( s, ms ) Altera los segundos de la fecha, cambi\u00e1ndolos por sec. .setMilliseconds( ms ) Altera los milisegundos de la fecha, cambi\u00e1ndolos por ms. .setTime( ts ) Establece una fecha a partir del tiempo Unix ts. Formato de fechas Propiedad Descripci\u00f3n .toDateString() Devuelve formato s\u00f3lo de fecha: Fri Aug 24 2018 .toLocaleDateString() Idem al anterior, pero en el formato regional actual: 24/8/2018 .toTimeString() Devuelve formato s\u00f3lo de hora: 00:23:24 GMT+0100 ... .toLocaleTimeString() Idem al anterior, pero en el formato regional actual: 0:26:37 .toISOString() Devuelve la fecha en el formato ISO 8601: 2018-08-23T23:27:29.380Z .toJSON() Idem al anterior, pero asegur\u00e1ndose que ser\u00e1 compatible con JSON. .toUTCString() Devuelve la fecha, utilizando UTC // INSTANCIAR let f = new Date ();// Fecha actual let f = new Date ( '2018/01/30 23:30:14' );// Fecha mediante cadena let f = new Date ( 872817240000 );// Fecha mediante timestamp let f = new Date ( y, m, d, h, min, s, ms ); // Fecha por componentes num\u00e9ricos let f = new Date (2020,11,17); // GETTER const f = new Date (\"2018/01/30 15:30:10.999\"); f. getDay ();// 2 (Martes) f. getDate (); // 30 f. getMonth (); // 0 (Enero) f. getFullYear (); // 2025 f. getHours (); // 15 f. getMinutes (); // 30 f. getSeconds (); // 10 f. getMilliseconds ();// 999 f. getTimezoneOffset (); // 0 f. getTime (); // 1517326210999 (Tiempo Unix) // SETTER const f = new Date(\"2018/01/30 15:30:10.999\"); f.setDate(15); // Cambia a 15/01/2018 15:30:10.999 (Devuelve 1516030210999) f.setMonth(1); // Cambia a 15/02/2018 15:30:10.999 (Devuelve 1518708610999) f.setFullYear(2020); // Cambia a 15/02/2020 15:30:10.999 (Devuelve 1581780610999) f.setHours(21); // Cambia a 15/02/2020 21:30:10.999 (Devuelve 1581802210999) f.setMinutes(00); // Cambia a 15/02/2020 21:00:10.999 (Devuelve 1581800410999) f.setSeconds(3); // Cambia a 15/02/2020 21:00:03.999 (Devuelve 1581800403999) f.setMilliseconds(79);// Cambia a 15/02/2020 21:00:03.079 (Devuelve 1581800403079) f.setTime(872817240000); // Cambia a 29/08/1997 02:14:00.000 (Devuelve 872817240000) // Devolver en formato texto, mes actual const MESES = [ \"Enero\", \"Febrero\",\"Marzo\",\"Abril\",\"Mayo\",\"Junio\",\"Julio\", \"Agosto\",\"Septiembre\",\"Octubre\",\"Noviembre\",\"Diciembre\"]; const f = new Date (); MESES[f. getMonth ()]; f.getTime() // Tiempo en timestamp // FORMATOS f.toDateString() // Fri Aug 24 2023 f.tolocaleDateString() // 24/8/2023 f.tolocaleTimeString() // 0/26/37","title":"UD 3"},{"location":"Unidad_3/#1-jerarquia-de-objetos-nativos-de-javascript","text":"Entre otras posibilidades, Javascript es un lenguaje que de forma nativa posee gran cantidad de funciones y objetos predefinidos. Estas funciones y objetos nos pueden ser \u00fatiles para realizar un c\u00f3digo mas eficiente, claro y ahorrarnos tiempo re-inventado la rueda. JavaScript define una jerarqu\u00eda de objetos que podemos reflejar de forma aproximada en un esquema similar al siguiente: Para el desarrollo del m\u00f3dulo vamos a considerar las siguientes clasificaciones de objetos: * Objetos Importantes * document , windows * Objetos del navegador * Navigator, Screen, Location, History * Objetos del lenguaje * Object, Boolean, Number, Math, Date, String, Array, RegExp * Objetos DOM * Form, Link, Input, Button, Meta, Image, Area, Style * Objetos definidos por el usuario.","title":"1. JERARQU\u00cdA DE OBJETOS NATIVOS DE JAVASCRIPT"},{"location":"Unidad_3/#2-objetos-importantes","text":"","title":"2. OBJETOS IMPORTANTES"},{"location":"Unidad_3/#windows","text":"El objeto Window es un objeto que tiene propiedades y controla elementos de lo que ocurre en la \"ventana\" del navegador. Los m\u00e9todos que estudiamos en el tema anterior como alert, prompt, etc. forman parte del objeto Window.Para hacer llamada a estos m\u00e9todos no hace falta nombrar expl\u00edcitamente Window (el navegador ya se encarga de ello). Algunos de los m\u00e9todos mas importantes no estudiados previamente son: * setTimeout(cadenaFuncion,tiempo): Este m\u00e9todo ejecuta la llamada a la funci\u00f3n proporcionada por la cadena (se puede construir una cadena que lleve par\u00e1metros) y la ejecuta pasados los milisegundos que hay en la variable tiempo. Devuelve un identificador del \"setTimeout\" que nos servir\u00e1 para referenciarlo si deseamos cancelarlo. SetTimeout solo ejecuta la orden una vez. * setInterval(cadenaFunci\u00f3n, tiempo): Exactamente igual que setTimeout, con la salvedad de que no se ejecuta una vez, sino que se repite c\u00edclicamente cada vez que pasa el tiempo proporcionado. * clearTimeout / clearInterval (id): Se le pasa el identificador del timeout/interval y lo anula. // Creamos un intervalo que cada 15 segundos muestra mensaje hola let idA=setInterval(\"alert('hola');\",15000); // Creamos un timeout que cuando pasen 3 segundos muestra mensaje adios let idB=setTimeout(\"alert('adios');\",3000); // Creamos un timeout que cuando pasen 5 segundos muestra mensaje let idC=setTimeout(\"alert('esto-no-seve');\",5000); // Cancelamos el ultimo timeout clearTimeout(idC);","title":"Windows"},{"location":"Unidad_3/#22-document","text":"Cada documento cargado en una ventana del navegador, ser\u00e1 un objeto de tipo document. El objeto document proporciona a los scripts, el acceso a todos los elementos HTML dentro de una p\u00e1gina. Este objeto forma parte adem\u00e1s del objeto window , y puede ser accedido a trav\u00e9s de la propiedad window.document o directamente document (ya que podemos omitir la referencia a la window actual). El objeto document nos permite acceder a las siguientes colecciones : Colecci\u00f3n Descripci\u00f3n anchors[] Es un array que contiene todos los hiperenlaces del documento. applets[] Es un array que contiene todos los applets del documento. forms[] Es un array que contiene todos los formularios del documento. images[] Es un array que contiene todas las im\u00e1genes del documento. links[] Es un array que contiene todos los enlaces del documento. El objeto document nos permite acceder a las siguientes propiedades y m\u00e9todos: Propiedad/M\u00e9todo Descripci\u00f3n cookie Devuelve todos los nombres/valores de las cookies en el documento domain Cadena que contiene el nombre de dominio del servidor que carg\u00f3 el documento. lastModified Devuelve la fecha y hora de la \u00faltima modificaci\u00f3n del documento readyState Devuelve el estado de carga del documento actual referrer Cadena que contiene la URL del documento desde el cu\u00e1l llegamos al documento actual title Devuelve o ajusta el t\u00edtulo del documento. URL Devuelve la URL completa del documento. getElementById() Para acceder a un elemento identificado por el id escrito entre par\u00e9ntesis. open() Abre el flujo de escritura para poder utilizar document.write() o document.writeln en el documento. close() Cierra el flujo abierto previamente con document.open(). write() Para poder escribir expresiones HTML o c\u00f3digo de JavaScript dentro de un documento.","title":"2.2 Document"},{"location":"Unidad_3/#3-gestion-de-ventanas","text":"JavaScript permite gestionar diferentes aspectos relacionados con las ventanas como por ejemplo, abrir nuevas ventanas al presionar un bot\u00f3n. Cada una de estas ventanas tiene un tama\u00f1o, posici\u00f3n y estilo diferente. Aclarar que estas ventanas emergentes suelen tener un contenido din\u00e1mico.","title":"3. GESTI\u00d3N DE VENTANAS"},{"location":"Unidad_3/#abrir-una-ventana","text":"Es una operaci\u00f3n muy com\u00fan en las p\u00e1ginas web y en algunas ocasiones se abren sin que el usuario haga nada. HTML permite abrir nuevas ventanas pero no permite ning\u00fan control posterior sobre ellas. Con JavaScript es posible abrir una ventana vac\u00eda mediante el m\u00e9todo open(): nuevaVentana = window.open(); El m\u00e9todo open(), cuenta con cuatro par\u00e1metros y todos son opcionales: * URL. * Nombre de la ventana. * Colecci\u00f3n de atributos que definen la apariencia de la ventana. * True ( URL reemplaza al documento actual ), false ( lo a\u00f1ade ) nuevaVentana=window.open(\"http://www.misitioWeb.com/ads\",\"Publicidad\",\"height=100, width=100\");","title":"Abrir una Ventana"},{"location":"Unidad_3/#cerrar-una-ventana","text":"Para cerrar una ventana se puede invocar el m\u00e9todo close(): myWindow1.document.write('<input type=button value=Cerrar onClick=window.close()>');","title":"Cerrar una Ventana"},{"location":"Unidad_3/#comunicacion-entre-ventanas","text":"Desde una ventana se pueden abrir o cerrar nuevas ventanas. La primera se denomina ventana principal, mientras que las segundas se denominan ventanas secundarias. Desde la ventana principal se puede acceder a las ventanas secundarias. En el siguiente ejemplo se muestra c\u00f3mo acceder a una ventana secundaria: <script> function abrirVentana(){ let ventanaSecundaria = window.open(\"\", \"VentanaSec\",\"width=500,height=500\"); ventanaSecundaria.document.write(document.getElementByID(\"idUrl\").value); } </script> <h1> Comunicaci\u00f3n entre ventanas </h1> <form name=\"formulario\"> <input id=\"idUrl\" type=\"text\" name=\"url\" size=50 value=\"http://www.\"> <input type=\"button\" value=\"Mostrar URL en ventana secundaria\" onclik=\"abrirVentana()\"> </form>","title":"Comunicaci\u00f3n entre Ventanas"},{"location":"Unidad_3/#4-arrays","text":"Son un tipo de objeto y no tienen tama\u00f1o fijo sino que podemos a\u00f1adirle elementos en cualquier momento. Podemos crearlos como instancias del objeto Array: let a=new Array(); // a = [] let b=new Array(2,4,6); // b = [2, 4, 6] Pero lo recomendado es crearlos usando notaci\u00f3n JSON (recomendado): let a=[]; let b=[2,4,6]; Sus elementos pueden ser de cualquier tipo, incluso podemos tener elementos de tipos distintos en un mismo array. Si no est\u00e1 definido un elemento su valor ser\u00e1 undefined. Ej.: let a=['Lunes', 'Martes', 2, 4, 6]; console.log(a[0]); // imprime 'Lunes' console.log(a[4]); // imprime 6 a[7]='Juan'; // ahora a=['Lunes', 'Martes', 2, 4, 6, , , 'Juan'] console.log(a[7]); // imprime 'Juan' console.log(a[6]); // imprime undefined","title":"4. ARRAYS"},{"location":"Unidad_3/#41-propiedades-de-un-array","text":"Length \u2192 Esta propiedad devuelve la longitud de un array: let a=['Lunes', 'Martes', 2, 4, 6]; console.log(a.length); // imprime 5 Podemos reducir el tama\u00f1o de un array cambiando esta propiedad: a.length=3; // ahora a=['Lunes', 'Martes', 2]","title":"4.1 Propiedades de un array"},{"location":"Unidad_3/#anadir-un-elemento","text":"A\u00f1adir/Eliminar Elementos M\u00e9todo Descripci\u00f3n . push ( elemento ) A\u00f1ade uno o varios elementos al final del array. . pop () Elimina y devuelve el \u00faltimo elemento del array. . unshift ( elemento ) A\u00f1ade uno o varios elementos al inicio del array. . shift () Elimina y devuelve el primer elemento del array. . concat ( elemento ) Concatena los elementos (o elementos de los arrays) pasados por par\u00e1metro. Podemos a\u00f1adir elementos al final de un array con push o al principio con unshift: let a=['Lunes', 'Martes', 2, 4, 6]; a.push('Juan'); // a=['Lunes', 'Martes', 2, 4, 6, 'Juan'] a.unshift(7); // a=[7, 'Lunes', 'Martes', 2, 4, 6, 'Juan'] Podemos borrar el elemento del final de un array con pop o el del principio con shift. Ambos m\u00e9todos devuelven el elemento que hemos borrado: let a=['Lunes', 'Martes', 2, 4, 6]; let ultimo=a.pop(); // a=['Lunes', 'Martes', 2, 4] y ultimo=6 let primero=a.shift(); // a=['Martes', 2, 4] y primero='Lunes'4.3 Crear un array derivado","title":"A\u00f1adir un elemento"},{"location":"Unidad_3/#crear-array-derivado","text":"M\u00e9todo Descripci\u00f3n . slice ( inicio, num_elem ) Devuelve los elementos desde la posici\u00f3n \"inicio\". . join ( separador ) Construye una cadena, uniendo los elementos del array mediante el separador . split ( separador ) Construye un array, a partir de una cadena y un separador. Por ejemplo, Slice, Devuelve un subarray con los elementos indicados pero sin modificar el array original let a=['Lunes', 'Martes', 2, 4, 6]; let subArray=a.slice(1, 3); // a=['Lunes', 'Martes', 2, 4, 6] // subArray=['Martes', 2, 4]; Podemos convertir los elementos de un array a una cadena con .join() especificando el car\u00e1cter separadorde los elementos. let a=['Lunes', 'Martes', 2, 4, 6]; let cadena=a.join('-'); // cadena='Lunes-Martes-2-4-6'","title":"Crear array derivado"},{"location":"Unidad_3/#busqueda-y-comprobacion","text":"M\u00e9todo Descripci\u00f3n Array.isArray( obj ) Comprueba si obj es un array. Devuelve true o false. includes( obj, from ) Comprueba si obj es uno de los elementos incluidos en el array. .indexOf( obj, from ) Devuelve la posici\u00f3n de la primera aparici\u00f3n de obj desde from. Includes \u2192 Devuelve true si el array incluye el elemento pasado como par\u00e1metro. Ejemplo: let arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]; arrayNotas.includes(7.5); // true","title":"B\u00fasqueda y comprobaci\u00f3n"},{"location":"Unidad_3/#ordenacion","text":"M\u00e9todo Descripci\u00f3n . reverse() Invierte el orden de elementos del array. . sort() Ordena los elementos del array, ordenaci\u00f3n alfab\u00e9tica. let a=['hola','adios','Bien','Mal',2,5,13,45] let b=a.sort(); // b=[13, 2, 45, 5 , \"Bien\", \"Mal\", \"adios\", \"hola\"]","title":"Ordenaci\u00f3n"},{"location":"Unidad_3/#array-functions","text":"Son m\u00e9todos propios de arrays, que permiten operar sobre todos los elementos del array para alcanzar un objetivo concreto. Se les pasa una funci\u00f3n de callback que se ejecutar\u00e1 en cada uno de los elementos del array M\u00e9todo Descripci\u00f3n .forEach (cb, arg) Realiza la operaci\u00f3n definida en cb por cada elemento del array. .every (cb, arg) Comprueba si todos los elementos del array cumplen la condici\u00f3n de cb. .some (cb, arg) Comprueba si al menos un elemto del array cumple la condici\u00f3n de cb. .map (cb, arg) Construye un array con lo que devuelve cb por cada elemento del array. .findIndex (cb, arg) Devuelve la posici\u00f3n del elemento que cumple la condici\u00f3n de cb. .find (cb, arg) Devuelve el elemento que cumple la condici\u00f3n de cb. . sort( func ) Ordena los elementos del array bajo un criterio de ordenaci\u00f3n func. Resumiendo, las funciones anteriores pueden ser utilizadas para: let array = ['a', 'bb', 'bc', 'd']; array .forEach( function(e,i) { alert('Elemento.' + e + ' en la posici\u00f3n' + i); }); array .every( e => e.length == 1 ); // false array .some( e => e.length == 2 ); // true let nuevoArr = array .map( e => e.length ); // [1 , 2 , 2 , 1] let nuevoArr = array. filter ( e => e[0] == 'b' ); // [\u2018bb\u2019,\u2019bc\u2019] let valor = array. find ( e => e[0] == \u2018b\u2019); //\u2019bb\u2019","title":"Array Functions"},{"location":"Unidad_3/#5-map","text":"Es una colecci\u00f3n de parejas de [clave,valor]. Un objeto en Javascript es un tipo particular de Map en que las claves s\u00f3lo pueden ser texto o n\u00fameros. M\u00e9todo Descripci\u00f3n . set ( clave , valor ) almacena el valor asociado a la clave. . get ( clave ) devuelve el valor de la clave. Ser\u00e1 \"undefined\" si la clave no existe en map. . has ( clave ) Devuelve truesi la clave existe en map,false si no existe. . delete ( clave ) elimina el valor de la clave. . clear () elimina todo de map. . size tama\u00f1o, devuelve la cantidad actual de elementos. let persona = new Map(); persona.set('nombre', \"Agustin\"); persona.set('apellido', \"Aguilera\"); persona.set('edad', 99); persona.get(\"edad\"); // 99 persona.size // 3 persona.delete(\"edad\") persona.size // 2 Para recorrer los valores del map utilizando el m\u00e9todo foreach: persona.forEach(function(valor,clave,mapa){ console.log(`valor : ${valor},clave : ${clave},tama\u00f1o: ${mapa.size}`); }) Otra alternativa ser\u00eda utilizar for.....of let persona = new Map([ ['nombre', 'Agustin'], ['apellido', 'Aguilera'], ['edad', 99] ]); for (const [clave, valor] of persona.entries()) { console.log(clave + ' = ' + valor) }","title":"5. MAP"},{"location":"Unidad_3/#6-set","text":"Es como un Map pero que no almacena los valores sino s\u00f3lo la clave. Podemos verlo como una colecci\u00f3n que no permite duplicados. Tiene la propiedad size que devuelve su tama\u00f1o y los m\u00e9todos . add (a\u00f1ade un elemento), . delete (lo elimina) o . has (indica si el elemento pasado se encuentra o no en la colecci\u00f3n) y tambi\u00e9n podemos recorrerlo con . forEach . M\u00e9todo Descripci\u00f3n . size Tama\u00f1o, devuelve la cantidad actual de elementos. . set ( valor ) Almacena el valor en la colecci\u00f3n. . has ( valor ) Devuelve true si el valor existe en el set, false si no existe. . delete ( valor ) Elimina el valor del set . clear () Elimina todo los valores de la colecci\u00f3n ~~. get ( valor )~~ \u00a1\u00a1 Funci\u00f3n no implementada en SET !! Una forma sencilla de eliminar los duplicados de un array es crear con \u00e9l un Set: let ganadores = ['M\u00e1rquez', 'Rossi', 'M\u00e1rquez', 'Lorenzo', 'Rossi', 'M\u00e1rquez', 'M\u00e1rquez']; let ganadoresNoDuplicados = new Set(ganadores); // {'M\u00e1rquez, 'Rossi', 'Lorenzo'} // volvemos a convertirlo en un Array. let ganadoresNoDuplicados = Array.from(new Set(ganadores)); // ['M\u00e1rquez, 'Rossi', 'Lorenzo']","title":"6. SET"},{"location":"Unidad_3/#7-objeto-number","text":"Number, es utilizado para valores enteros y decimales. NaN \u2192 N ot a N umber","title":"7. OBJETO NUMBER"},{"location":"Unidad_3/#constantes","text":"Constante Descripci\u00f3n Number. POSITIVE_INFINITY Infinito positivo: +\u221e Number. NEGATIVE_INFINITY Infinito negativo: -\u221e","title":"Constantes"},{"location":"Unidad_3/#comprobar-numeros","text":"Propiedad Descripci\u00f3n Number.isFinite(n) Comprueba si n es un n\u00famero finito. Number.isInteger(n) Comprueba si n es un n\u00famero entero. Number.isNaN(n) Comprueba si n no es un n\u00famero.","title":"Comprobar n\u00fameros"},{"location":"Unidad_3/#conversion-numerica","text":"Propiedad Descripci\u00f3n Number.parseInt ( s) Convierte una cadena de texto s en un n\u00famero entero. Number.parseFloat ( s ) Convierte una cadena de texto s en un n\u00famero decimal.","title":"Conversi\u00f3n num\u00e9rica"},{"location":"Unidad_3/#representacion-numerica","text":"Propiedad Descripci\u00f3n .toExponential(n) Convierte el n\u00famero a notaci\u00f3n exponencial con n decimales. .toFixed(n) Convierte el n\u00famero a notaci\u00f3n de punto fijo con n decimales. .toPrecision(p) Utiliza p d\u00edgitos de precisi\u00f3n en el n\u00famero. let n = 4; // Literal Num\u00e9rico let nObj = new Number(4); // Objeto Num\u00e9rico //Costantes Number.MAX_VALUE Number.MIN_VALUE Number.NaN //M\u00c9TODOS Number.isNaN (NaN); //true, es un not a number Number.isNaN (4); //false, es un n\u00famero Number.isInteger (4);//true, Es un entero Number.isInteger (4.7); //false,Es un decimal Number.parseInt ('4');// Pasar a entero la cadena \u20184\u2019 Number.parseInt ('11101', 2); // 29, antes se especific\u00f3 en binario(b=2) (1234).toString();// \"1234\", pasa a cadena el valor num\u00e9rico. (1234).toString(2); // \"101101\", pasa a binario el valor num\u00e9rico. (1.5).toFixed(3);//1.500 , Punto fijo con 3 decimales (1.5).toExponential (2);// \"1.50e+0\" en exponencial (1.5).toFixed (2); // \"1.50\" en punto fijo (1.5).toPrecision (1); // \"2\" typeof n; // number","title":"Representaci\u00f3n num\u00e9rica"},{"location":"Unidad_3/#8-objeto-math","text":"","title":"8. OBJETO MATH"},{"location":"Unidad_3/#constantes_1","text":"Propiedad Descripci\u00f3n Math.PI N\u00famero PI Math.SQRT2 Ra\u00edz cuadrada de 2","title":"Constantes"},{"location":"Unidad_3/#metodos-matematicos","text":"Propiedad Descripci\u00f3n Math.abs(x) Devuelve el valor absoluto de x. Math.exp(x) Exponente, Devuelve el n\u00famero e elevado a x. Math.max(a, b, c...) Devuelve el n\u00famero m\u00e1s grande de los indicados por par\u00e1metro. Math.min(a, b, c...) Devuelve el n\u00famero m\u00e1s peque\u00f1o de los indicados por par\u00e1metro. Math.sqrt(x) Devuelve la ra\u00edz cuadrada de x. Math.random() Devuelve un n\u00famero al azar entre 0 y 1 (con 16 decimales)","title":"M\u00e9todos matem\u00e1ticos"},{"location":"Unidad_3/#metodos-de-redondeo","text":"Propiedad Descripci\u00f3n Math.round(x) Devuelve el redondeo de x . Entero m\u00e1s cercano Math.ceil(x) Devuelve el redondeo superior de x. Entero m\u00e1s alto Math.floor(x) Devuelve el redondeo inferior de x. Entero m\u00e1s bajo Math.trunc(x) Devuelve la parte entera //Constantes Math.PI Math.abs (-5) //5,Valor absoluto Math.max (1,2,3,4) //4, M\u00e1ximo de la lista Math.min (1,2,3,4)//1, M\u00ednimo de la lista Math.pow (x,y)// x^y Math.sqrt (2)// Ra\u00edz cuadrada de 2 //M\u00e9todos Math.floor (4.7) //4, parte entera, con redondeo inferior Math.ceil (4.7)//5, parte entera, con redondeo superior Math.round (4.7)//5, parte entera, con redondeo al m\u00e1s cercano Math.trunc (4.7)//4, devuelve parte entera(truncamiento) // Trabajar con aleatorios Math.random(); // N\u00famero al azar entre [0, 1) con 16 decimales let x = Math .floor( Math .random () * 5); // N\u00famero entre 0 y 5.","title":"M\u00e9todos de redondeo"},{"location":"Unidad_3/#9-objeto-string","text":"","title":"9. OBJETO STRING"},{"location":"Unidad_3/#propiedades","text":"Propiedad Descripci\u00f3n . length Devuelve el n\u00famero de car\u00e1cteres de la variable de tipo string en cuesti\u00f3n.","title":"Propiedades"},{"location":"Unidad_3/#metodos-posicionales","text":"Propiedad Descripci\u00f3n .charAt ( pos ) Devuelve el car\u00e1cter en la posici\u00f3n pos de la variable. Similar a [] .concat ( str1, str2... ) Devuelve el texto de la variable unido a str1, a str2. Similar a + .indexOf ( str ) Devuelve la primera posici\u00f3n del texto str. .indexOf ( str, from ) Idem al anterior, partiendo desde la posici\u00f3n from.","title":"M\u00e9todos posicionales"},{"location":"Unidad_3/#metodos-de-busqueda","text":"Propiedad Descripci\u00f3n . includes(s, from) Comprueba si el texto contiene el subtexto s desde la posici\u00f3n from. . search(regex) Busca si hay un patr\u00f3n que encaje con regex y devuelve la posici\u00f3n. . match(regex) Idem a la anterior, pero devuelve las coincidencias encontradas.","title":"M\u00e9todos de b\u00fasqueda"},{"location":"Unidad_3/#metodos-de-transformar","text":"Propiedad Descripci\u00f3n . repeat( n ) Devuelve el texto de la variable repetido n veces. . toLowerCase() Devuelve el texto de la variable en min\u00fasculas. . toUpperCase() Devuelve el texto sin espacios a la izquierda y derecha. . trim() Devuelve el texto sin espacios a la izquierda y derecha. . replace( regex, newstr ) Reemplaza la primera aparici\u00f3n del texto str por newstr. . replaceAll( regex, newstr ) Reemplaza todas las apariciones del texto str por newstr. . substr( ini, len ) Devuelve el subtexto desde la posici\u00f3n ini hasta ini+len. . split( regex, limit) Separa el texto usando sep como separador, en limit fragmentos. . padStart( len, str ) Rellena el principio de la cadena con str hasta llegar al tama\u00f1o len. . padEnd( len, str ) Rellena el final de la cadena con str hasta llegar al tama\u00f1o len.","title":"M\u00e9todos de transformar"},{"location":"Unidad_3/#concatenacion","text":"Propiedad Descripci\u00f3n + Concatenaci\u00f3n de cadenas y variables Backticks ${} Concatenaci\u00f3n de cadenas y variables (en ESMAC2015) let s = 'cadena'; // Literal Cadena let sObj = new String (\u2018cadena\u2019)// Objeto String // PROPIEDADES s.length // 6, n\u00famero de car\u015bcteres \u201cHola\u201d.lenght // 4, n\u00famero de car\u00e1cteres s[0] //c,primer caracter // M\u00c9TODOS s.charAt(1) // c, car\u00e1cter en la posici\u00f3n 1 s.indexOf(\u2018den\u2019) // 3, posici\u00f3n 1a ocurrencia cadena \u2018den\u2019, -1 no encontrado s.concat(\u201833\u2019,\u201944\u2019) // cadena3344, concatena todas las cadenas \"Manz\".concat(\"i\", \"to\"); // cadena3344, concatena todas las cadenas \"Manz\". includes (\"an\"); // true ('Manz' incluye 'an') \"Hola a todos\". search (/o/g); // busca globalmente las \"o\", 1, devuelve posici\u00f3n de la 1a o \"Hola a todos\". match (/o/g); // ['o', 'o', 'o'], las 3 \"o\" que encuentra \"Na\". repeat (5); // 'NaNaNaNaNa' \"MANZ\". toLowerCase (); // 'manz' \"manz\". toUpperCase ();// 'MANZ' \" Hola \". trim ();// 'Hola' \"Amigo\". replace (\"A\", \"Ene\");// 'Enemigo' \"Dispara\". replace (\"a\", \"i\"); // 'Dispira' (s\u00f3lo reemplaza la primera aparici\u00f3n) \"Dispara\". replace (/a/g, \"i\"); // 'Dispiri' (reemplaza todas las ocurrencias) \"Submarino\". substr (3); // 'marino' (desde el 3 en adelante) \"Submarino\". substr (3, 1); // 'm' (desde el 3, hasta el 3+1) (1:2:3:4). split( \u2018:\u2019 ) // Separamos por \",\" [1,2,3,4] \"C\u00f3digo\".split(\"\"); // ['C', '\u00f3', 'd', 'i', 'g', 'o'] (6 elementos) \"5\".padStart(6, \"0\");// '000005' \"A\".padEnd(5, \"\u00b7\"); // 'A\u00b7\u00b7\u00b7\u00b7' const sujeto = \"frase\"; const adjetivo = \"concatenada\"; \"Una \" + sujeto + \" bien \" + adjetivo;// Concatenaci\u00f3n antigua `Una ${sujeto} mejor ${adjetivo}` // Concatenaci\u00f3n actual","title":"Concatenaci\u00f3n"},{"location":"Unidad_3/#10-objeto-date","text":"","title":"10. OBJETO DATE"},{"location":"Unidad_3/#constructores","text":"Propiedad Descripci\u00f3n new Date() Obtiene la fecha del momento actual. new Date( str ) Convierte el texto con formato YYYY/MM/DD HH:MM:SS a fecha. new Date( num ) Convierte el n\u00famero num, en formato Tiempo UNIX, a fecha UTC. new Date( y, m, d, h, min, s, ms ) Crea una fecha UTC a partir de componentes num\u00e9ricos*. Date.now() Devuelve el Tiempo UNIX de la fecha actual. Equivalente a +new Date().","title":"Constructores"},{"location":"Unidad_3/#getter-de-fechas","text":"Propiedad Descripci\u00f3n .getDay() Devuelve el d\u00eda de la semana: OJO: 0 Domingo, 6 S\u00e1bado. .getFullYear() Devuelve el a\u00f1o con 4 cifras. .getMonth() Devuelve la representaci\u00f3n interna del mes. OJO: 0 Enero - 11 Diciembre. .getDate() Devuelve el d\u00eda del mes. .getHours() Devuelve la hora. OJO: Formato militar; 23 en lugar de 11. .getMinutes() Devuelve los minutos. .getSeconds() Devuelve los segundos. .getMilliseconds() Devuelve los milisegundos. .getTime() Devuelve el unix timestamp: segundos transcurridos desde 1/1/1970. .getTimezoneOffset() Diferencia horaria (en min) de la hora local respecto a UTC","title":"Getter de fechas"},{"location":"Unidad_3/#setter-de-fechas","text":"Propiedad Descripci\u00f3n .setFullYear( year ) .setFullYear( y, m, d ) Altera el a\u00f1o de la fecha, cambi\u00e1ndolo por year. Formato de 4 d\u00edgitos. .setMonth( month ) .setMonth( m, d) Altera el mes de la fecha, cambi\u00e1ndolo por month. Ojo: 0-11 (Ene-Dic). .setDate( day ) Altera el d\u00eda de la fecha, cambi\u00e1ndolo por day. .setHour( hour ) .setHour( h, m, s, ms) Altera la hora de la fecha, cambi\u00e1ndola por hour. .setMinutes(min) .setMinutes( m, s, ms ) Altera los minutos de la fecha, cambi\u00e1ndolos por min. .setSeconds( sec ) .setSeconds( s, ms ) Altera los segundos de la fecha, cambi\u00e1ndolos por sec. .setMilliseconds( ms ) Altera los milisegundos de la fecha, cambi\u00e1ndolos por ms. .setTime( ts ) Establece una fecha a partir del tiempo Unix ts.","title":"Setter de fechas"},{"location":"Unidad_3/#formato-de-fechas","text":"Propiedad Descripci\u00f3n .toDateString() Devuelve formato s\u00f3lo de fecha: Fri Aug 24 2018 .toLocaleDateString() Idem al anterior, pero en el formato regional actual: 24/8/2018 .toTimeString() Devuelve formato s\u00f3lo de hora: 00:23:24 GMT+0100 ... .toLocaleTimeString() Idem al anterior, pero en el formato regional actual: 0:26:37 .toISOString() Devuelve la fecha en el formato ISO 8601: 2018-08-23T23:27:29.380Z .toJSON() Idem al anterior, pero asegur\u00e1ndose que ser\u00e1 compatible con JSON. .toUTCString() Devuelve la fecha, utilizando UTC // INSTANCIAR let f = new Date ();// Fecha actual let f = new Date ( '2018/01/30 23:30:14' );// Fecha mediante cadena let f = new Date ( 872817240000 );// Fecha mediante timestamp let f = new Date ( y, m, d, h, min, s, ms ); // Fecha por componentes num\u00e9ricos let f = new Date (2020,11,17); // GETTER const f = new Date (\"2018/01/30 15:30:10.999\"); f. getDay ();// 2 (Martes) f. getDate (); // 30 f. getMonth (); // 0 (Enero) f. getFullYear (); // 2025 f. getHours (); // 15 f. getMinutes (); // 30 f. getSeconds (); // 10 f. getMilliseconds ();// 999 f. getTimezoneOffset (); // 0 f. getTime (); // 1517326210999 (Tiempo Unix) // SETTER const f = new Date(\"2018/01/30 15:30:10.999\"); f.setDate(15); // Cambia a 15/01/2018 15:30:10.999 (Devuelve 1516030210999) f.setMonth(1); // Cambia a 15/02/2018 15:30:10.999 (Devuelve 1518708610999) f.setFullYear(2020); // Cambia a 15/02/2020 15:30:10.999 (Devuelve 1581780610999) f.setHours(21); // Cambia a 15/02/2020 21:30:10.999 (Devuelve 1581802210999) f.setMinutes(00); // Cambia a 15/02/2020 21:00:10.999 (Devuelve 1581800410999) f.setSeconds(3); // Cambia a 15/02/2020 21:00:03.999 (Devuelve 1581800403999) f.setMilliseconds(79);// Cambia a 15/02/2020 21:00:03.079 (Devuelve 1581800403079) f.setTime(872817240000); // Cambia a 29/08/1997 02:14:00.000 (Devuelve 872817240000) // Devolver en formato texto, mes actual const MESES = [ \"Enero\", \"Febrero\",\"Marzo\",\"Abril\",\"Mayo\",\"Junio\",\"Julio\", \"Agosto\",\"Septiembre\",\"Octubre\",\"Noviembre\",\"Diciembre\"]; const f = new Date (); MESES[f. getMonth ()]; f.getTime() // Tiempo en timestamp // FORMATOS f.toDateString() // Fri Aug 24 2023 f.tolocaleDateString() // 24/8/2023 f.tolocaleTimeString() // 0/26/37","title":"Formato de fechas"},{"location":"Unidad_4/","text":"1.- MODELO DE OBJETOS DEL DOCUMENTO(DOM) La creaci\u00f3n del Document Object Model o DOM es una de las innovaciones que m\u00e1s ha influido en el desarrollo de las p\u00e1ginas web din\u00e1micas y de las aplicaciones web m\u00e1s complejas. DOM permite a los programadores web acceder y manipular las p\u00e1ginas XHTML como si fueran documentos XML. De hecho, DOM se dise\u00f1\u00f3 originalmente para manipular de forma sencilla los documentos XML. A pesar de sus or\u00edgenes, DOM se ha convertido en una utilidad disponible para la mayor\u00eda de lenguajes de programaci\u00f3n (Java, PHP, JavaScript) y cuyas \u00fanicas diferencias se encuentran en la forma de implementarlo. Para mas informaci\u00f3n general de DOM: * https://es.wikipedia.org/wiki/Document_Object_Model * http://www.w3schools.com/js/js_htmldom.asp \u00c1rbol de nodos Una de las tareas habituales en la programaci\u00f3n de aplicaciones web con JavaScript consiste en la manipulaci\u00f3n de las p\u00e1ginas web. De esta forma, es habitual obtener el valor almacenado por algunos elementos (por ejemplo los elementos de un formulario), crear un elemento (p\u00e1rrafos, div, etc.) de forma din\u00e1mica y a\u00f1adirlo a la p\u00e1gina, aplicar una animaci\u00f3n a un elemento (que aparezca/desaparezca, que se desplace, etc.). Todas estas tareas habituales son muy sencillas de realizar gracias a DOM. Sin embargo, para poder utilizar las utilidades de DOM, es necesario \"transformar\" la p\u00e1gina original. Una p\u00e1gina HTML normal no es m\u00e1s que una sucesi\u00f3n de caracteres, por lo que es un formato muy dif\u00edcil de manipular. Por ello, los navegadores web transforman autom\u00e1ticamente todas las p\u00e1ginas web en una estructura m\u00e1s eficiente de manipular. El siguiente c\u00f3digo html, es transformado de forma autom\u00e1tica por el navegador, en la siguiente estructura deobjetos DOM con forma de \u00e1rbol: Tipos de nodos La especificaci\u00f3n completa de DOM define 12 tipos de nodos, aunque las p\u00e1ginas XHTML habituales se pueden manipular manejando solamente cuatro o cinco tipos de nodos b\u00e1sicos : * Document \u2192 Nodo ra\u00edz del que derivan todos los dem\u00e1s nodos del \u00e1rbol. * Element \u2192 Representa cada una de las etiquetas XHTML. * Attr \u2192 Representa cada uno de los atributos de las etiquetas XHTML. * Text \u2192 Nodo que contiene el texto encerrado por una etiqueta XHTML. * Comment \u2192 Representa los comentarios incluidos en la p\u00e1gina XHTML. Los otros tipos de nodos existentes que no se van a considerar son : * DocumentType , CDataSection , DocumentFragment , Entity , EntityReference , ProcessingInstruction y Notation . Propiedades de un nodo Las principales propiedades de un nodo(de tipo element) son: * elemento.innerHTML: todo lo que hay entre la etiqueta que abre elemento y la que lo cierra, incluyendo otras etiquetas HTML. <p>Esta p\u00e1gina es <strong>muy simple</strong></p> let contenido = elemento.innerHTML; // contenido='Esta p\u00e1gina es <strong>muy simple</strong>' elemento.textContent: todo lo que hay entre la etiqueta que abre elemento y la que lo cierra, pero ignorando otras etiquetas HTML. let contenido = elemento.textContent; // contenido='Esta p\u00e1gina es muy simple' elemento.value: devuelve la propiedad 'value' de un input (en el caso de un input de tipo text devuelve lo que hay escrito en \u00e9l). Como los inputs no tienen etiqueta de cierre no podemos usar .innerHTML ni .textContent <input name=\"nombre\"> let cont1 = elem1.value; // cont1 valdr\u00eda lo que haya escrito en el <input> en ese momento <input type=\"radio\" value=\"H\">Hombre let cont2 = elem2.value; // cont2=\"H\"2. 2 .- ACCESO AL DOCUMENTO DESDE C\u00d3DIGO Cuando el \u00e1rbol de nodos DOM ha sido construido por el navegador de forma autom\u00e1tica, podemos acceder a cualquier nodo.En el caso de existir m\u00e1s de un elemento, estos se van almacenando en un array(colecci\u00f3n). Las siguientes funciones van a sustituir a la funci\u00f3n document.write() que hemos utilizado hasta hoy(no recomiendo seguir utiliz\u00e1ndola): Acceso desde propiedades del document Supongamos que tenemos una p\u00e1gina HTML con la siguiente estructura: Se consideran como ' atajos ' para obtener algunos elementos comunes: document . documentElement \u2192 Devuelve el nodo del elemento html document . head \u2192 Devuelve el nodo del elemento head document . body \u2192 Devuelve el nodo del elemento body document . title \u2192 Devuelve el nodo del elemento title document . link \u2192 Devuelve una colecci\u00f3n con todos los hiperenlaces del documento document . anchor \u2192Devuelve una colecci\u00f3n con todas las anclas del documento document . forms \u2192 Devuelve una colecci\u00f3n con todos los formularios del documento document . images \u2192 Devuelve una colecci\u00f3n con todas las im\u00e1genes del documento document . scripts \u2192 Devuelve una colecci\u00f3n con todos los scripts del documento Acceso a nodo desde m\u00e9todos del document Las funciones aqu\u00ed estudiadas normalmente se usan sobre el elemento \"document\", ya que as\u00ed se aplican a todo el documento. Aun as\u00ed, pueden usarse en cualquier nodo XHTML, entonces la b\u00fasqueda se realizar\u00eda no en todo en el documento, sino en al sub-\u00e1rbol formado por el elemento en si y sus hijos. getElementById( identificador ) Esta funci\u00f3n devuelve un elemento DOM del sub-\u00e1rbol cuyo identificador sea el indicado en la cadena \"identificador\". let myDiv = document.getElementById(\"miDiv\"); alert(\"El html de miDiv es \" + myDiv.innerHTML) getElementsByTagName( etiqueta ) Esta funci\u00f3n devuelve una array con todos los elementos DOM del sub-\u00e1rbol cuya etiqueta XHTML sea la indicada en la cadena \"etiqueta\". let myDiv = document.getElementById(\"miDiv\") let losP = myDiv.getElementsByTagName(\"p\"); let num = losP.length; alert(\"Hay \" + num + \" <p> elementos en el elemento miDiv\"); alert(\"En el primer P el HTML asociado es \"+losP[0].innerHTML); getElementsByName( nombre ) Esta funci\u00f3n devuelve una array con todos los elementos DOM del sub-\u00e1rbol cuyo atributo name sea el indicado en la cadena \"nombre\". let x = document.getElementsByName(\"name\"); // Todos los checkbox que tengan de name alumnos, los marcamos for (let i = 0; i < x.length; i++) { if (x[i].type == \"checkbox\") { x[i].checked = true; } } getElementsBy Class Name( nombre ) Esta funci\u00f3n devuelve una array con todos los elementos DOM del sub-\u00e1rbol que tengan la clase indicada en la cadena \"nombre\". let x = document.getElementsByClassName(\"name\"); A modo de resumen, Las funciones a utilizar son: Descripci\u00f3n Funci\u00f3n Resultado Directo por Id document.getElementById( id ) 1 Directo por atributo Name document.getElementsByName( name ) [ . . . ] Directo por etiqueta document.getElementsByTagName( etiqueta ) [ . . . ] Directo por nombre de clase document.getElementsByClassName( name ) [ . . . ] Directo por Id: Directo por atributo Name: Directo por etiqueta: Directo por nombre de clase: <form id= \"idForm\" name= \"nombreForm\" class= \"miClase\" > document.getElementById(\"idForm\") // id=\"idForm\" document.getElementsByName(\"nombreForm\") // name=\"nombreForm\" document.getElementsByTagName(\"form\") // etiqueta <form> document.getElementsByClassName(\"miclase\") // class=\"miClase\" Acceso a nodo utilizando selectores CSS .querySelector( selector ) : Devuelve el primer nodo seleccionado por el selector CSS indicado. let nodo = document.querySelector('p.error'); // la variable nodo contendr\u00e1 el primer p\u00e1rrafo de clase _error_ .querySelectorAll( selector ) : Devuelve una colecci\u00f3n con todos los nodos seleccionados por el selector CSS indicado. let nodos = document.querySelectorAll('p.error'); // la variable nodos contendr\u00e1 todos los p\u00e1rrafos de clase _error_ NOTA: al aplicar estos m\u00e9todos sobre document se seleccionar\u00e1 sobre la p\u00e1gina pero podr\u00edan tambi\u00e9n aplicarse a cualquier nodo y en ese caso la b\u00fasqueda se realizar\u00eda s\u00f3lo entre los descendientes de dicho nodo. 3.- ACCESO A NODOS A PARTIR DE OTROS En muchas ocasiones queremos acceder a cierto nodo a partir de uno dado. Para ello tenemos los siguientes m\u00e9todos que se aplican sobre un elemento del \u00e1rbol DOM: elemento. parentElement Devuelve el elemento padre de elemento elemento. children : Devuelve la colecci\u00f3n con todos los elementos hijo de elemento (s\u00f3lo elementos HTML, no comentarios ni nodos de tipo texto) elemento. childNodes : Devuelve la colecci\u00f3n con todos los hijos de elemento, incluyendo comentarios y nodos de tipo textopor lo que no suele utilizarse elemento. firstElementChild : Devuelve el elemento HTML que es el primer hijo de elemento elemento. firstChild : Devuelve el nodo que es el primer hijo de elemento (incluyendo nodos de tipo texto o comentarios) elemento. lastElementChild , elemento. lastChild : Igual pero con el \u00faltimo hijo elemento. nextElementSibling : Devuelve el elemento HTML que es el siguiente hermano de elemento elemento. nextSibling : Devuelve el nodo que es el siguiente hermano de elemento (incluyendo nodos de tipo texto o comentarios) elemento. previousElementSibling , elemento. previousSibling : Igual pero con el hermano anterior elemento. hasChildNodes : Indica si elemento tiene o no nodos hijos elemento. childElementCount : Devuelve el no de nodos hijo de elemento 4.- GESTI\u00d3N DE NODOS Crear Nodo Vamos a ver qu\u00e9 m\u00e9todos nos permiten cambiar el \u00e1rbol DOM, y por tanto crear un nodo: document.createElement(' etiqueta '): crea un nuevo elemento HTML con la etiqueta indicada, pero a\u00fan no se a\u00f1ade a la p\u00e1gina. ~~~javascript let nuevoLi = document.createElement('li'); ~~~ document.createTextNode(' texto '): crea un nuevo nodo de texto con el texto indicado, que luego tendremos que a\u00f1adir a un nodo HTML. ~~~javascript let textoLi = document.createTextNode('Nuevo elemento de lista'); ~~~ document.createComment(' comentario '): crea un nuevo comentario de c\u00f3digo con el texto indicado, que luego tendremos que a\u00f1adir a un nodo HTML. ~~~javascript let comentario = document.createComment('Nuevo comentario de c\u00f3digo'); ~~~ A\u00f1adir nodo a la p\u00e1gina Los siguientes m\u00e9todos permiten a\u00f1adir un nodo(creado con las funciones del apartado anterior) a la p\u00e1gina: elemento.appendChild( nuevoNodo ): a\u00f1ade nuevoNodo como \u00faltimo hijo de elemento. Ahora ya se ha a\u00f1adido a la p\u00e1gina. ~~~javascript // a\u00f1ade el texto creado al elemento LI creado nuevoLi.appendChild(textoLi); // selecciona el 1o UL de la p\u00e1gina let miPrimeraLista = document.getElementsByTagName('ul')[0]; // a\u00f1ade LI como \u00faltimo hijo de UL, es decir al final de la lista miPrimeraLista.appendChild(nuevoLi); ~~~ elemento.insertBefore(nuevoNodo, nodo): a\u00f1ade nuevoNodo como hijo de elemento antes del hijo nodo. ~~~javascript // selecciona el 1o UL de la p\u00e1gina let miPrimeraLista = document.getElementsByTagName('ul')[0]; // selecciona el 1o LI de miPrimeraLista let primerElementoLista = miPrimeraLista.getElementsByTagName('li')[0]; // a\u00f1ade LI al principio de la lista miPrimeraLista.insertBefore(nuevoLi, primerElementoLista); ~~~ Eliminar nodo Si el objetivo es eliminar un nodo de la p\u00e1gina, debemos utilizar las siguientes funciones: * elemento.removeChild( nodo ): borra nodo de elemento y por tanto se elimina de la p\u00e1gina. // selecciona el 1o UL de la p\u00e1gina let miPrimeraLista = document.getElementsByTagName('ul')[0]; // selecciona el 1o LI de miPrimeraLista let primerElementoLista = miPrimeraLista.getElementsByTagName('li')[0]; // borra el primer elemento de la lista miPrimeraLista.removeChild(primerElementoLista); // Tambi\u00e9n podr\u00edamos haberlo borrado sin tener el padre con: primerElementoDeLista.parentElement.removeChild(primerElementoDeLista); Modificar el DOM con childNode Childnode es una interfaz que permite manipular del DOM de forma m\u00e1s sencilla pero no est\u00e1 soportada en los navegadores Safari de IOS. Incluye los m\u00e9todos: * elemento. before (nuevoNodo) \u2192 A\u00f1ade el nuevoNodo pasado antes del nodo elemento * elemento. after (nuevoNodo) \u2192 A\u00f1ade el nuevoNodo pasado despu\u00e9s del nodo elemento * elemento. replaceWith (nuevoNodo) \u2192 Reemplaza el nodo elemento con el nuevoNodo pasado * elemento. remove () \u2192 Elimina el nodo elemento 5.- GESTI\u00d3N DE ATRIBUTOS Podemos ver y modificar los valores de los atributos de cada elemento HTML y tambi\u00e9n a\u00f1adir o eliminar atributos: * elemento. attributes : Devuelve un array con todos los atributos de elemento * elemento. hasAttribute (' nombreAtributo ') Indica si elemento tiene o no definido el atributo nombreAtributo * elemento. getAttribute (' nombreAtributo '): Devuelve el valor del atributo nombreAtributo de elemento. Para muchos elementos este valor puede directamente con elemento.atributo. * elemento. setAttribute (' nombreAtributo ', ' valor '): Establece valor como nuevo valor del atributo nombreAtributo de elemento. Tambi\u00e9n puede cambiarse el valor directamente con elemento.atributo=valor. * elemento. removeAttribute (' nombreAtributo '): Elimina el atributo nombreAtributo de elemento A algunos atributos comunes como id, title o name se puede acceder y cambiar como si fueran una propiedad del elemento (elemento.atributo). // selecciona el 1o UL de la p\u00e1gina let miPrimeraLista = document.getElementsByTagName('ul')[0]; miPrimeraLista.id = 'primera-lista'; // es equivalente ha hacer: miPrimeraLista.setAttribute('id', 'primera-lista'); <div id=\"idEnlace\" class=\"info data dark\" data-number=\"5\"></div> var enlace = document.getElementById(\u201cidEnlace\u201d); div.hasAttribute('data-number'); // true div.hasAttributes(); // true (tiene 3) div.getAttributeNames(); // ['id','data-number','class'] div.getAttribute('id'); // 'page' div.removeAttribute('id'); // Elimina el atributo id. div.setAttribute('id', 'idEnlace'); // Vuelve a a\u00f1adirlo. if (enlace.hasAttribute(\u201chref\u201d) == false){ enlace.setAttribute(\u201chref\u201d, \u201cwww.google.es\u201d); // Cambiar href enlace.className(\u201cvisitado\u201d);// Asignar clase \u201cvisitado\u201d } 6.- ATRIBUTOS DE CLASE Ya sabemos que el aspecto de la p\u00e1gina debe configurarse en el CSS por lo que no debemos aplicar atributos style al HTML. En lugar de ello les ponemos clases a los elementos que har\u00e1n que se les aplique el estilo definido para dicha clase. Como es algo muy com\u00fan en lugar de utilizar las instrucciones de: elemento.setAttribute('className', 'destacado') elemento.className='destacado' Podemos usar la propiedad classList que devuelve la colecci\u00f3n de todas las clases que tiene el elemento. <p class=\"destacado direccion\">...: let clases=elemento.classList; // clases=['destacado', 'direccion'], :four_leaf_clover: OJO es una colecci\u00f3n, no un Array. Adem\u00e1s dispone de los m\u00e9todos : . add ( clase ): a\u00f1ade al elemento la clase pasada (si ya la tiene no hace nada). elemento.classList.add('primero'); // ahora elemento ser\u00e1 <p class=\"destacado direccion primero\">... . remove ( clase ): elimina del elemento la clase pasada (si no la tiene no hace nada). elemento.classList.remove('direccion'); // ahora elemento ser\u00e1 <p class=\"destacado primero\">... . toogle ( clase ): a\u00f1ade la clase pasada si no la tiene o la elimina si la tiene ya. elemento.classList.toogle('destacado'); // ahora elemento ser\u00e1 <p class=\"primero\">... elemento.classList.toogle('direccion'); // ahora elemento ser\u00e1 <p class=\"primero direccion\">... . contains ( clase ): dice si el elemento tiene o no la clase pasada. Ej.: elemento.classList.contains('direccion'); // devuelve true . replace ( oldClase, newClase ): reemplaza del elemento una clase existente por una nueva. elemento.classList.replace('primero', 'ultimo'); // ahora elemento ser\u00e1 <p class=\"ultimo direccion\">...","title":"UD 4"},{"location":"Unidad_4/#1-modelo-de-objetos-del-documentodom","text":"La creaci\u00f3n del Document Object Model o DOM es una de las innovaciones que m\u00e1s ha influido en el desarrollo de las p\u00e1ginas web din\u00e1micas y de las aplicaciones web m\u00e1s complejas. DOM permite a los programadores web acceder y manipular las p\u00e1ginas XHTML como si fueran documentos XML. De hecho, DOM se dise\u00f1\u00f3 originalmente para manipular de forma sencilla los documentos XML. A pesar de sus or\u00edgenes, DOM se ha convertido en una utilidad disponible para la mayor\u00eda de lenguajes de programaci\u00f3n (Java, PHP, JavaScript) y cuyas \u00fanicas diferencias se encuentran en la forma de implementarlo. Para mas informaci\u00f3n general de DOM: * https://es.wikipedia.org/wiki/Document_Object_Model * http://www.w3schools.com/js/js_htmldom.asp","title":"1.- MODELO DE OBJETOS DEL DOCUMENTO(DOM)"},{"location":"Unidad_4/#arbol-de-nodos","text":"Una de las tareas habituales en la programaci\u00f3n de aplicaciones web con JavaScript consiste en la manipulaci\u00f3n de las p\u00e1ginas web. De esta forma, es habitual obtener el valor almacenado por algunos elementos (por ejemplo los elementos de un formulario), crear un elemento (p\u00e1rrafos, div, etc.) de forma din\u00e1mica y a\u00f1adirlo a la p\u00e1gina, aplicar una animaci\u00f3n a un elemento (que aparezca/desaparezca, que se desplace, etc.). Todas estas tareas habituales son muy sencillas de realizar gracias a DOM. Sin embargo, para poder utilizar las utilidades de DOM, es necesario \"transformar\" la p\u00e1gina original. Una p\u00e1gina HTML normal no es m\u00e1s que una sucesi\u00f3n de caracteres, por lo que es un formato muy dif\u00edcil de manipular. Por ello, los navegadores web transforman autom\u00e1ticamente todas las p\u00e1ginas web en una estructura m\u00e1s eficiente de manipular. El siguiente c\u00f3digo html, es transformado de forma autom\u00e1tica por el navegador, en la siguiente estructura deobjetos DOM con forma de \u00e1rbol:","title":"\u00c1rbol de nodos"},{"location":"Unidad_4/#tipos-de-nodos","text":"La especificaci\u00f3n completa de DOM define 12 tipos de nodos, aunque las p\u00e1ginas XHTML habituales se pueden manipular manejando solamente cuatro o cinco tipos de nodos b\u00e1sicos : * Document \u2192 Nodo ra\u00edz del que derivan todos los dem\u00e1s nodos del \u00e1rbol. * Element \u2192 Representa cada una de las etiquetas XHTML. * Attr \u2192 Representa cada uno de los atributos de las etiquetas XHTML. * Text \u2192 Nodo que contiene el texto encerrado por una etiqueta XHTML. * Comment \u2192 Representa los comentarios incluidos en la p\u00e1gina XHTML. Los otros tipos de nodos existentes que no se van a considerar son : * DocumentType , CDataSection , DocumentFragment , Entity , EntityReference , ProcessingInstruction y Notation .","title":"Tipos de nodos"},{"location":"Unidad_4/#propiedades-de-un-nodo","text":"Las principales propiedades de un nodo(de tipo element) son: * elemento.innerHTML: todo lo que hay entre la etiqueta que abre elemento y la que lo cierra, incluyendo otras etiquetas HTML. <p>Esta p\u00e1gina es <strong>muy simple</strong></p> let contenido = elemento.innerHTML; // contenido='Esta p\u00e1gina es <strong>muy simple</strong>' elemento.textContent: todo lo que hay entre la etiqueta que abre elemento y la que lo cierra, pero ignorando otras etiquetas HTML. let contenido = elemento.textContent; // contenido='Esta p\u00e1gina es muy simple' elemento.value: devuelve la propiedad 'value' de un input (en el caso de un input de tipo text devuelve lo que hay escrito en \u00e9l). Como los inputs no tienen etiqueta de cierre no podemos usar .innerHTML ni .textContent <input name=\"nombre\"> let cont1 = elem1.value; // cont1 valdr\u00eda lo que haya escrito en el <input> en ese momento <input type=\"radio\" value=\"H\">Hombre let cont2 = elem2.value; // cont2=\"H\"2.","title":"Propiedades de un nodo"},{"location":"Unidad_4/#2-acceso-al-documento-desde-codigo","text":"Cuando el \u00e1rbol de nodos DOM ha sido construido por el navegador de forma autom\u00e1tica, podemos acceder a cualquier nodo.En el caso de existir m\u00e1s de un elemento, estos se van almacenando en un array(colecci\u00f3n). Las siguientes funciones van a sustituir a la funci\u00f3n document.write() que hemos utilizado hasta hoy(no recomiendo seguir utiliz\u00e1ndola):","title":"2 .- ACCESO AL DOCUMENTO DESDE C\u00d3DIGO"},{"location":"Unidad_4/#acceso-desde-propiedades-del-document","text":"Supongamos que tenemos una p\u00e1gina HTML con la siguiente estructura: Se consideran como ' atajos ' para obtener algunos elementos comunes: document . documentElement \u2192 Devuelve el nodo del elemento html document . head \u2192 Devuelve el nodo del elemento head document . body \u2192 Devuelve el nodo del elemento body document . title \u2192 Devuelve el nodo del elemento title document . link \u2192 Devuelve una colecci\u00f3n con todos los hiperenlaces del documento document . anchor \u2192Devuelve una colecci\u00f3n con todas las anclas del documento document . forms \u2192 Devuelve una colecci\u00f3n con todos los formularios del documento document . images \u2192 Devuelve una colecci\u00f3n con todas las im\u00e1genes del documento document . scripts \u2192 Devuelve una colecci\u00f3n con todos los scripts del documento","title":"Acceso desde propiedades del document"},{"location":"Unidad_4/#acceso-a-nodo-desde-metodos-del-document","text":"Las funciones aqu\u00ed estudiadas normalmente se usan sobre el elemento \"document\", ya que as\u00ed se aplican a todo el documento. Aun as\u00ed, pueden usarse en cualquier nodo XHTML, entonces la b\u00fasqueda se realizar\u00eda no en todo en el documento, sino en al sub-\u00e1rbol formado por el elemento en si y sus hijos. getElementById( identificador ) Esta funci\u00f3n devuelve un elemento DOM del sub-\u00e1rbol cuyo identificador sea el indicado en la cadena \"identificador\". let myDiv = document.getElementById(\"miDiv\"); alert(\"El html de miDiv es \" + myDiv.innerHTML) getElementsByTagName( etiqueta ) Esta funci\u00f3n devuelve una array con todos los elementos DOM del sub-\u00e1rbol cuya etiqueta XHTML sea la indicada en la cadena \"etiqueta\". let myDiv = document.getElementById(\"miDiv\") let losP = myDiv.getElementsByTagName(\"p\"); let num = losP.length; alert(\"Hay \" + num + \" <p> elementos en el elemento miDiv\"); alert(\"En el primer P el HTML asociado es \"+losP[0].innerHTML); getElementsByName( nombre ) Esta funci\u00f3n devuelve una array con todos los elementos DOM del sub-\u00e1rbol cuyo atributo name sea el indicado en la cadena \"nombre\". let x = document.getElementsByName(\"name\"); // Todos los checkbox que tengan de name alumnos, los marcamos for (let i = 0; i < x.length; i++) { if (x[i].type == \"checkbox\") { x[i].checked = true; } } getElementsBy Class Name( nombre ) Esta funci\u00f3n devuelve una array con todos los elementos DOM del sub-\u00e1rbol que tengan la clase indicada en la cadena \"nombre\". let x = document.getElementsByClassName(\"name\"); A modo de resumen, Las funciones a utilizar son: Descripci\u00f3n Funci\u00f3n Resultado Directo por Id document.getElementById( id ) 1 Directo por atributo Name document.getElementsByName( name ) [ . . . ] Directo por etiqueta document.getElementsByTagName( etiqueta ) [ . . . ] Directo por nombre de clase document.getElementsByClassName( name ) [ . . . ] Directo por Id: Directo por atributo Name: Directo por etiqueta: Directo por nombre de clase: <form id= \"idForm\" name= \"nombreForm\" class= \"miClase\" > document.getElementById(\"idForm\") // id=\"idForm\" document.getElementsByName(\"nombreForm\") // name=\"nombreForm\" document.getElementsByTagName(\"form\") // etiqueta <form> document.getElementsByClassName(\"miclase\") // class=\"miClase\"","title":"Acceso a nodo desde m\u00e9todos del document"},{"location":"Unidad_4/#acceso-a-nodo-utilizando-selectores-css","text":".querySelector( selector ) : Devuelve el primer nodo seleccionado por el selector CSS indicado. let nodo = document.querySelector('p.error'); // la variable nodo contendr\u00e1 el primer p\u00e1rrafo de clase _error_ .querySelectorAll( selector ) : Devuelve una colecci\u00f3n con todos los nodos seleccionados por el selector CSS indicado. let nodos = document.querySelectorAll('p.error'); // la variable nodos contendr\u00e1 todos los p\u00e1rrafos de clase _error_ NOTA: al aplicar estos m\u00e9todos sobre document se seleccionar\u00e1 sobre la p\u00e1gina pero podr\u00edan tambi\u00e9n aplicarse a cualquier nodo y en ese caso la b\u00fasqueda se realizar\u00eda s\u00f3lo entre los descendientes de dicho nodo.","title":"Acceso a nodo utilizando selectores CSS"},{"location":"Unidad_4/#3-acceso-a-nodos-a-partir-de-otros","text":"En muchas ocasiones queremos acceder a cierto nodo a partir de uno dado. Para ello tenemos los siguientes m\u00e9todos que se aplican sobre un elemento del \u00e1rbol DOM: elemento. parentElement Devuelve el elemento padre de elemento elemento. children : Devuelve la colecci\u00f3n con todos los elementos hijo de elemento (s\u00f3lo elementos HTML, no comentarios ni nodos de tipo texto) elemento. childNodes : Devuelve la colecci\u00f3n con todos los hijos de elemento, incluyendo comentarios y nodos de tipo textopor lo que no suele utilizarse elemento. firstElementChild : Devuelve el elemento HTML que es el primer hijo de elemento elemento. firstChild : Devuelve el nodo que es el primer hijo de elemento (incluyendo nodos de tipo texto o comentarios) elemento. lastElementChild , elemento. lastChild : Igual pero con el \u00faltimo hijo elemento. nextElementSibling : Devuelve el elemento HTML que es el siguiente hermano de elemento elemento. nextSibling : Devuelve el nodo que es el siguiente hermano de elemento (incluyendo nodos de tipo texto o comentarios) elemento. previousElementSibling , elemento. previousSibling : Igual pero con el hermano anterior elemento. hasChildNodes : Indica si elemento tiene o no nodos hijos elemento. childElementCount : Devuelve el no de nodos hijo de elemento","title":"3.- ACCESO A NODOS A PARTIR DE OTROS"},{"location":"Unidad_4/#4-gestion-de-nodos","text":"","title":"4.- GESTI\u00d3N DE NODOS"},{"location":"Unidad_4/#crear-nodo","text":"Vamos a ver qu\u00e9 m\u00e9todos nos permiten cambiar el \u00e1rbol DOM, y por tanto crear un nodo: document.createElement(' etiqueta '): crea un nuevo elemento HTML con la etiqueta indicada, pero a\u00fan no se a\u00f1ade a la p\u00e1gina. ~~~javascript let nuevoLi = document.createElement('li'); ~~~ document.createTextNode(' texto '): crea un nuevo nodo de texto con el texto indicado, que luego tendremos que a\u00f1adir a un nodo HTML. ~~~javascript let textoLi = document.createTextNode('Nuevo elemento de lista'); ~~~ document.createComment(' comentario '): crea un nuevo comentario de c\u00f3digo con el texto indicado, que luego tendremos que a\u00f1adir a un nodo HTML. ~~~javascript let comentario = document.createComment('Nuevo comentario de c\u00f3digo'); ~~~","title":"Crear Nodo"},{"location":"Unidad_4/#anadir-nodo-a-la-pagina","text":"Los siguientes m\u00e9todos permiten a\u00f1adir un nodo(creado con las funciones del apartado anterior) a la p\u00e1gina: elemento.appendChild( nuevoNodo ): a\u00f1ade nuevoNodo como \u00faltimo hijo de elemento. Ahora ya se ha a\u00f1adido a la p\u00e1gina. ~~~javascript // a\u00f1ade el texto creado al elemento LI creado nuevoLi.appendChild(textoLi); // selecciona el 1o UL de la p\u00e1gina let miPrimeraLista = document.getElementsByTagName('ul')[0]; // a\u00f1ade LI como \u00faltimo hijo de UL, es decir al final de la lista miPrimeraLista.appendChild(nuevoLi); ~~~ elemento.insertBefore(nuevoNodo, nodo): a\u00f1ade nuevoNodo como hijo de elemento antes del hijo nodo. ~~~javascript // selecciona el 1o UL de la p\u00e1gina let miPrimeraLista = document.getElementsByTagName('ul')[0]; // selecciona el 1o LI de miPrimeraLista let primerElementoLista = miPrimeraLista.getElementsByTagName('li')[0]; // a\u00f1ade LI al principio de la lista miPrimeraLista.insertBefore(nuevoLi, primerElementoLista); ~~~","title":"A\u00f1adir nodo a la p\u00e1gina"},{"location":"Unidad_4/#eliminar-nodo","text":"Si el objetivo es eliminar un nodo de la p\u00e1gina, debemos utilizar las siguientes funciones: * elemento.removeChild( nodo ): borra nodo de elemento y por tanto se elimina de la p\u00e1gina. // selecciona el 1o UL de la p\u00e1gina let miPrimeraLista = document.getElementsByTagName('ul')[0]; // selecciona el 1o LI de miPrimeraLista let primerElementoLista = miPrimeraLista.getElementsByTagName('li')[0]; // borra el primer elemento de la lista miPrimeraLista.removeChild(primerElementoLista); // Tambi\u00e9n podr\u00edamos haberlo borrado sin tener el padre con: primerElementoDeLista.parentElement.removeChild(primerElementoDeLista);","title":"Eliminar nodo"},{"location":"Unidad_4/#modificar-el-dom-con-childnode","text":"Childnode es una interfaz que permite manipular del DOM de forma m\u00e1s sencilla pero no est\u00e1 soportada en los navegadores Safari de IOS. Incluye los m\u00e9todos: * elemento. before (nuevoNodo) \u2192 A\u00f1ade el nuevoNodo pasado antes del nodo elemento * elemento. after (nuevoNodo) \u2192 A\u00f1ade el nuevoNodo pasado despu\u00e9s del nodo elemento * elemento. replaceWith (nuevoNodo) \u2192 Reemplaza el nodo elemento con el nuevoNodo pasado * elemento. remove () \u2192 Elimina el nodo elemento","title":"Modificar el DOM con childNode"},{"location":"Unidad_4/#5-gestion-de-atributos","text":"Podemos ver y modificar los valores de los atributos de cada elemento HTML y tambi\u00e9n a\u00f1adir o eliminar atributos: * elemento. attributes : Devuelve un array con todos los atributos de elemento * elemento. hasAttribute (' nombreAtributo ') Indica si elemento tiene o no definido el atributo nombreAtributo * elemento. getAttribute (' nombreAtributo '): Devuelve el valor del atributo nombreAtributo de elemento. Para muchos elementos este valor puede directamente con elemento.atributo. * elemento. setAttribute (' nombreAtributo ', ' valor '): Establece valor como nuevo valor del atributo nombreAtributo de elemento. Tambi\u00e9n puede cambiarse el valor directamente con elemento.atributo=valor. * elemento. removeAttribute (' nombreAtributo '): Elimina el atributo nombreAtributo de elemento A algunos atributos comunes como id, title o name se puede acceder y cambiar como si fueran una propiedad del elemento (elemento.atributo). // selecciona el 1o UL de la p\u00e1gina let miPrimeraLista = document.getElementsByTagName('ul')[0]; miPrimeraLista.id = 'primera-lista'; // es equivalente ha hacer: miPrimeraLista.setAttribute('id', 'primera-lista'); <div id=\"idEnlace\" class=\"info data dark\" data-number=\"5\"></div> var enlace = document.getElementById(\u201cidEnlace\u201d); div.hasAttribute('data-number'); // true div.hasAttributes(); // true (tiene 3) div.getAttributeNames(); // ['id','data-number','class'] div.getAttribute('id'); // 'page' div.removeAttribute('id'); // Elimina el atributo id. div.setAttribute('id', 'idEnlace'); // Vuelve a a\u00f1adirlo. if (enlace.hasAttribute(\u201chref\u201d) == false){ enlace.setAttribute(\u201chref\u201d, \u201cwww.google.es\u201d); // Cambiar href enlace.className(\u201cvisitado\u201d);// Asignar clase \u201cvisitado\u201d }","title":"5.- GESTI\u00d3N DE ATRIBUTOS"},{"location":"Unidad_4/#6-atributos-de-clase","text":"Ya sabemos que el aspecto de la p\u00e1gina debe configurarse en el CSS por lo que no debemos aplicar atributos style al HTML. En lugar de ello les ponemos clases a los elementos que har\u00e1n que se les aplique el estilo definido para dicha clase. Como es algo muy com\u00fan en lugar de utilizar las instrucciones de: elemento.setAttribute('className', 'destacado') elemento.className='destacado' Podemos usar la propiedad classList que devuelve la colecci\u00f3n de todas las clases que tiene el elemento. <p class=\"destacado direccion\">...: let clases=elemento.classList; // clases=['destacado', 'direccion'], :four_leaf_clover: OJO es una colecci\u00f3n, no un Array. Adem\u00e1s dispone de los m\u00e9todos : . add ( clase ): a\u00f1ade al elemento la clase pasada (si ya la tiene no hace nada). elemento.classList.add('primero'); // ahora elemento ser\u00e1 <p class=\"destacado direccion primero\">... . remove ( clase ): elimina del elemento la clase pasada (si no la tiene no hace nada). elemento.classList.remove('direccion'); // ahora elemento ser\u00e1 <p class=\"destacado primero\">... . toogle ( clase ): a\u00f1ade la clase pasada si no la tiene o la elimina si la tiene ya. elemento.classList.toogle('destacado'); // ahora elemento ser\u00e1 <p class=\"primero\">... elemento.classList.toogle('direccion'); // ahora elemento ser\u00e1 <p class=\"primero direccion\">... . contains ( clase ): dice si el elemento tiene o no la clase pasada. Ej.: elemento.classList.contains('direccion'); // devuelve true . replace ( oldClase, newClase ): reemplaza del elemento una clase existente por una nueva. elemento.classList.replace('primero', 'ultimo'); // ahora elemento ser\u00e1 <p class=\"ultimo direccion\">...","title":"6.- ATRIBUTOS DE CLASE"}]}